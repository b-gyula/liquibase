<?xml version="1.0" encoding="UTF-8"?>

<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            targetNamespace="http://www.liquibase.org/xml/ns/dbchangelog"
            xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
            elementFormDefault="qualified">

    <xsd:simpleType name="propertyExpression" id="propertyExpression">
        <xsd:restriction base="xsd:string">
            <xsd:pattern value="\$\{[\w\.\-\+_]+\}"/>
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:simpleType name="booleanExp" id="booleanExp">
        <xsd:annotation>
            <xsd:documentation>Extension to standard XSD boolean type to allow ${} parameters</xsd:documentation>
        </xsd:annotation>
        <xsd:union>
            <xsd:simpleType>
                <xsd:restriction base="xsd:boolean"/>
            </xsd:simpleType>
            <xsd:simpleType>
                <xsd:restriction base="propertyExpression"/>
            </xsd:simpleType>
        </xsd:union>
    </xsd:simpleType>
    <!-- TODO: Add 32 and 64bit integer version also -->
    <xsd:simpleType name="integerExp" id="integerExp">
        <xsd:annotation>
            <xsd:documentation>Extension to standard XSD integer type to allow ${} parameter placeholders</xsd:documentation>
        </xsd:annotation>
        <xsd:union>
            <xsd:simpleType>
                <xsd:restriction base="xsd:int">
                    <xsd:minInclusive value="0"/>
                </xsd:restriction>
            </xsd:simpleType>
            <xsd:simpleType>
                <xsd:restriction base="propertyExpression"/>
            </xsd:simpleType>
        </xsd:union>
    </xsd:simpleType>

    <xsd:simpleType name="onChangeSetPreconditionErrorOrFail">
        <xsd:restriction base="xsd:string">
            <xsd:enumeration value="HALT">
                <xsd:annotation>
                    <xsd:documentation>Halts the execution of the entire changelog (default).
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="WARN">
                <xsd:annotation>
                    <xsd:documentation>Sends a warning and continues executing the changeset / changelog as normal.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="CONTINUE">
                <xsd:annotation>
                    <xsd:documentation>Skips over the changeset. Execution of the changeset will be
                        attempted again on the next update. Continues with the changelog.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="MARK_RAN">
                <xsd:annotation>
                    <xsd:documentation>Skips over the changeset but mark it as executed. Continues with the changelog.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:enumeration>
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:simpleType name="onChangeLogPreconditionErrorOrFail">
        <xsd:restriction base="onChangeSetPreconditionErrorOrFail">
            <xsd:enumeration value="HALT">
                <xsd:annotation>
                    <xsd:documentation>Halts the execution of the entire changelog (default).
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="WARN">
                <xsd:annotation>
                    <xsd:documentation>Sends a warning and continues executing the changelog as normal.</xsd:documentation>
                </xsd:annotation>
            </xsd:enumeration>
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:simpleType name="onChangeLogPreconditionOnSqlOutput">
        <xsd:restriction base="xsd:string">
            <xsd:enumeration value="TEST">
                <xsd:annotation>
                    <xsd:documentation>evaluate preconditions normally</xsd:documentation>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="FAIL">
                <xsd:annotation>
                    <xsd:documentation>fail any preconditions</xsd:documentation>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="IGNORE">
                <xsd:annotation>
                    <xsd:documentation>ignore any preconditions</xsd:documentation>
                </xsd:annotation>
            </xsd:enumeration>
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:simpleType name="ObjectQuotingStrategy">
        <xsd:annotation>
        	<xsd:documentation>
                Controls how object names are quoted in the SQL files generated by Liquibase and used in calls to
                the database. Default: LEGACY.
                see <a href='https://docs.liquibase.com/concepts/changelogs/attributes/objectquotingstrategy.html'>objectQuotingStrategy</a></xsd:documentation>
        </xsd:annotation>
        <xsd:restriction base="xsd:string">
            <xsd:enumeration value="LEGACY">
                  <xsd:annotation>
                      <xsd:documentation>The default value. Does not quote objects unless the database specifies that
                          they must be quoted, usually including reserved words and names with hyphens. In PostgreSQL
                          databases, mixed-case names will also be quoted.</xsd:documentation>
                  </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="QUOTE_ALL_OBJECTS">
                  <xsd:annotation>
                      <xsd:documentation>Every object gets quoted. For example, person becomes "person"</xsd:documentation>
                  </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="QUOTE_ONLY_RESERVED_WORDS">
                <xsd:annotation>
                    <xsd:documentation>The same logic as LEGACY, but without mixed-case objects in PostgreSQL databases.</xsd:documentation>
                </xsd:annotation>
            </xsd:enumeration>
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:simpleType name="propertyName">
        <xsd:annotation>
            <xsd:documentation>Name of the property
                Supported format includes alphanumeric characters, +, -, . , and _
            </xsd:documentation>
        </xsd:annotation>
        <xsd:restriction base="xsd:string">
            <xsd:pattern value="[\w\.\-\+_]+"/>
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:complexType name="include">
        <xsd:annotation>
            <xsd:documentation><a href="https://docs.liquibase.com/change-types/include.html">Include</a> the file defined by the @file attribute</xsd:documentation>
        </xsd:annotation>
        <xsd:attribute name="file" type="xsd:string" use="required">
            <xsd:annotation>
        		    <xsd:documentation>Path of the file to include</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="relativeToChangelogFile" type="booleanExp">
            <xsd:annotation>
        		    <xsd:documentation>Specifies whether the {file} path is relative to the changelog file rather than looked up in the search path. Default: false</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="errorIfMissing" type="booleanExp" default="true">
        	   <xsd:annotation>
        		    <xsd:documentation>If set to true and the file defined in @file does not exist, the update fails. Default: true.</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="context" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>Deprecated since v4.16. Use @contextFilter instead. If both set, @contextFilter will overwrite</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="contextFilter" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>Appends a <a href="https://docs.liquibase.com/concepts/changelogs/attributes/contexts.html">context</a>
                    (using an AND statement) to all contained changesets</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="labels" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>Appends a <a href="https://docs.liquibase.com/concepts/changelogs/attributes/labels.html">label</a>
                    (using an AND statement) to all contained changesets</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="ignore" type="booleanExp">
            <xsd:annotation>
        		    <xsd:documentation>If true changesets in the included file treated as if it does not exist. The file still has to exist if @errorIfMissing true. Since v3.7.0. Default: false</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="logicalFilePath" type="xsd:string"/>
        <xsd:anyAttribute namespace="##other" processContents="lax"/>
    </xsd:complexType>

    <xsd:complexType name="includeAll">
        <xsd:annotation>
            <xsd:documentation>Include the files in the folder defined by the @path attribute</xsd:documentation>
        </xsd:annotation>
        <xsd:attribute name="path" type="xsd:string" use="required">
            <xsd:annotation>
                <xsd:documentation>Path of the folder to include files from (required)</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="errorIfMissingOrEmpty" type="booleanExp" default="true">
            <xsd:annotation>
        		    <xsd:documentation>Controls what happens if the path does not exist or is an empty directory.
                            If set to true, the update fails. Default: true.</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attributeGroup ref="relativeToChangelogPath"/>
        <xsd:attribute name="resourceComparator" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>A string containing the name of the class you want to use for sorting.
                    Your class must implement the <a href='https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/Comparator.html'>Comparator</a> interface.
                    See <a href='https://contribute.liquibase.com/extensions-integrations/extension-guides/add-an-includeall-comparator/'>Add an IncludeAll Comparator</a></xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="filter" type="xsd:string">
        	<xsd:annotation>
        		<xsd:documentation>Allows you to specify a custom filter class to include or exclude files from the includeAll search.
            			Your class must implement the <a href='https://javadocs.liquibase.com/liquibase-core/liquibase/changelog/IncludeAllFilter.html'>IncludeAllFilter</a>
            			  interface.
            See <a href='https://contribute.liquibase.com/extensions-integrations/extension-guides/add-an-includeall-filter'>Add an IncludeAll Filter</a>.</xsd:documentation>
        	</xsd:annotation>
       </xsd:attribute>
        <xsd:attribute name="context" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>Deprecated since v4.16. Use @contextFilter instead. If both set, @contextFilter will overwrite</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="contextFilter" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>Appends a <a href="https://docs.liquibase.com/concepts/changelogs/attributes/contexts.html">context</a>
                    (using an AND statement) to all contained changesets</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="labels" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>Appends a <a href="https://docs.liquibase.com/concepts/changelogs/attributes/labels.html">label</a>
                    (using an AND statement) to all contained changesets</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="minDepth" type="integerExp">
            <xsd:annotation>
                <xsd:documentation>Allows you to control the minimum depth of recursion applied by includeAll.
                    If minDepth=1, search includes files from the directory in path.
                    If minDepth=2, search excludes files from the directory in path and starts from subdirectories of path.
                    Values are inclusive. Default: 1</xsd:documentation>
       		</xsd:annotation>
       	</xsd:attribute>
        <xsd:attribute name="maxDepth" type="integerExp">
            <xsd:annotation>
                <xsd:documentation>Allows you to control the maximum depth of recursion applied by includeAll,
                    starting from the directory in path.
                    If maxDepth=1, only files in path will be included no subdirectories are searched.
                    Values are inclusive. If maxDepth &lt; minDepth, Liquibase returns an error. default: Integer.MAX_VALUE.</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="endsWithFilter" type="xsd:string">
            <xsd:annotation>
        		    <xsd:documentation>Allows you to filter which files are include based on their file name ending. since v4.24</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="ignore" type="booleanExp">
            <xsd:annotation>
                <xsd:documentation>Treat changesets in the included file as if it does not exist. Since 4.27. Default: false.</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="logicalFilePath" type="xsd:string"/>
        <xsd:anyAttribute namespace="##other" processContents="lax"/>
    </xsd:complexType>

    <!-- This is the main (root) part of the xsd -->
    <xsd:element name="databaseChangeLog">
        <xsd:annotation>
            <xsd:documentation>The root element of the
            <a href='https://docs.liquibase.com/concepts/changelogs/home.html'>changelog</a></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="removeChangeSetProperty" minOccurs="0" maxOccurs="unbounded">
                    <xsd:complexType>
                        <xsd:attribute name="change" type="xsd:string"/>
                        <xsd:attribute name="dbms" type="xsd:string"/>
                        <xsd:attribute name="remove" type="xsd:string"/>
                    </xsd:complexType>
                </xsd:element>

                <xsd:element name="property" minOccurs="0" maxOccurs="unbounded">
                    <xsd:annotation>
                        <xsd:documentation>Define a property for substitution in your changelog.
                            The tokens to replace in your changelog are using the ${property-name} syntax.
                            For example, your tablespace name in Oracle may differ from environment to environment,
                            but you want to only write one create table changeset that can be used in all your environments.
                            See: <a href='https://docs.liquibase.com/concepts/changelogs/property-substitution.html'>property substitution</a></xsd:documentation>
                    </xsd:annotation>
                    <xsd:complexType>
                        <xsd:attribute name="file" type="nonEmptyString">
                            <xsd:annotation>
                                <xsd:documentation>The name of the file from which the properties should be loaded.
                                    It will create a property for all properties in the file.
                                    The content of the file must follow the Java properties file format.
                                </xsd:documentation>
                            </xsd:annotation>
                        </xsd:attribute>
                        <xsd:attribute name="name" type="propertyName">
                            <xsd:annotation>
                                <xsd:documentation>Name of the property. Required if the @file attribute is not set.
                                    Supported format includes alphanumeric characters, +, -, . , and _
                                </xsd:documentation>
                            </xsd:annotation>
                        </xsd:attribute>
                        <xsd:attribute name="value" type="xsd:string">
                            <xsd:annotation>
                                <xsd:documentation>The value of the property. Required if the @file attribute is not set</xsd:documentation>
                            </xsd:annotation>
                        </xsd:attribute>
                        <xsd:attributeGroup ref="dbms"/>
                        <xsd:attributeGroup ref="contextAndLabels"/>
                        <xsd:attribute name="global" type="booleanExp">
                            <xsd:annotation>
                                <xsd:documentation>Define whether the property is global or limited to the actual databaseChangeLog. Default: true.
                                </xsd:documentation>
                            </xsd:annotation>
                        </xsd:attribute>
                        <xsd:attribute name="target" type="xsd:string"/>
                        <xsd:anyAttribute namespace="##other" processContents="lax"/>
                    </xsd:complexType>
                </xsd:element>

                <xsd:element name="preConditions" minOccurs="0">
                    <xsd:annotation>
                        <xsd:documentation><a href='https://docs.liquibase.com/concepts/changelogs/preconditions.html'>Preconditions</a>
                            required to execute the changelog.
                            If no conditional tags are specified, the default logic is AND for multiple conditions</xsd:documentation>
                    </xsd:annotation>
                    <xsd:complexType>
                        <xsd:complexContent>
                            <xsd:restriction base="preConditions">
                                <xsd:group ref="PreConditionChildren" maxOccurs="unbounded"/>
                                <xsd:attributeGroup ref="preConditionsAttributes"/>
                                <xsd:attribute name="onError" type="onChangeLogPreconditionErrorOrFail">
                                    <xsd:annotation>
                                        <xsd:documentation>Controls what happens if there is an error while checking the preconditions. Default: HALT</xsd:documentation>
                                    </xsd:annotation>
                                </xsd:attribute>
                                <xsd:attribute name="onFail" type="onChangeLogPreconditionErrorOrFail">
                                    <xsd:annotation>
                                        <xsd:documentation>Controls what happens if the preconditions check fails. Default: HALT</xsd:documentation>
                                    </xsd:annotation>
                                </xsd:attribute>
                            </xsd:restriction>
                        </xsd:complexContent>
                    </xsd:complexType>
                </xsd:element>

                <xsd:choice minOccurs="0" maxOccurs="unbounded">
                    <xsd:element name="changeSet" minOccurs="0" maxOccurs="unbounded">
                        <xsd:annotation>
                            <xsd:documentation>
                                <a href='https://docs.liquibase.com/concepts/changelogs/changeset.html'>Changesets</a>
                                are the units of change that Liquibase tracks execution of.
                                Each changeSet is uniquely identified by the “filename”, “id” and “author” attributes.
                            </xsd:documentation>
                        </xsd:annotation>
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element name="validCheckSum" minOccurs="0"  maxOccurs="unbounded">
                                    <xsd:annotation>
                                        <xsd:documentation>
                                            Adds a <a href='https://docs.liquibase.com/concepts/changelogs/changeset-checksums.html'>checksum</a>
                                            that is considered valid for this changeset, regardless of what is stored in the database.
                                            It is primarily used when you need to change a changeset and don't want errors thrown on databases on which it has already been run (not a recommended procedure).
                                            Special value "1:any" will match to any checksum and will not execute the changeset on ANY change.</xsd:documentation>
                                    </xsd:annotation>
                                    <xsd:complexType mixed="true">
                                         <xsd:group ref="comment"/>
                                    </xsd:complexType>
                                </xsd:element>

                                <xsd:element name="preConditions" type="preConditions" minOccurs="0"/>

                                <xsd:choice>
                                    <xsd:element name="tagDatabase" type="tagDatabase" maxOccurs="1"/>
                                    <xsd:group ref="ChangeSetChildren" minOccurs="0" maxOccurs="unbounded"/>
                                </xsd:choice>

                                <xsd:element name="modifySql" minOccurs="0" maxOccurs="unbounded">
                                    <xsd:complexType>
                                        <xsd:choice>
                                            <xsd:group ref="modifySqlChildren" minOccurs="1"
                                                       maxOccurs="unbounded"/>
                                        </xsd:choice>
                                        <xsd:attributeGroup ref="dbms"/>
                                        <xsd:attributeGroup ref="contextAndLabels"/>
                                        <xsd:attribute name="applyToRollback" type="booleanExp"/>
                                    </xsd:complexType>
                                </xsd:element>

                            </xsd:sequence>
                            <xsd:attributeGroup ref="changeSetAttributes"/>
                            <xsd:anyAttribute namespace="##other" processContents="lax"/>
                        </xsd:complexType>
                    </xsd:element>


                    <xsd:element name="include" type="include" minOccurs="0" maxOccurs="unbounded"/>
                    <xsd:element name="includeAll" type="includeAll" minOccurs="0" maxOccurs="unbounded"/>

                    <xsd:element name="modifyChangeSets" minOccurs="0" maxOccurs="unbounded">
                        <xsd:complexType>
                            <xsd:choice minOccurs="0" maxOccurs="unbounded">
                                <xsd:element name="include" type="include"/>
                                <xsd:element name="includeAll" type="includeAll"/>
                            </xsd:choice>
                            <xsd:attribute name="runWith" type="xsd:string" />
                            <xsd:attribute name="runWithSpoolFile" type="xsd:string" />
                            <xsd:attribute name="endDelimiter" type="xsd:string" />
                        </xsd:complexType>
                    </xsd:element>
                </xsd:choice>
            </xsd:sequence>
            <xsd:attribute name="logicalFilePath" type="xsd:string">
                <xsd:annotation>
                    <xsd:documentation>Overrides the file name and path when creating the unique identifier of changesets.
                        It is required when you want to move or rename changelogs. Highly recommended to use.</xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
            <xsd:attributeGroup ref="context"/>
            <xsd:attribute name="objectQuotingStrategy" type="ObjectQuotingStrategy" default="LEGACY"/>
            <xsd:attribute name="changeLogId" type="xsd:string"/>
            <xsd:anyAttribute namespace="##other" processContents="lax"/>
        </xsd:complexType>
    </xsd:element>

    <xsd:attributeGroup name="preConditionsAttributes">
        <xsd:attribute name="onFailMessage" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>Provides a custom message to output when preconditions fail</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="onErrorMessage" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>Provides a custom message to output if there is an error while checking the preconditions</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="onSqlOutput" type="onChangeLogPreconditionOnSqlOutput">
            <xsd:annotation>
                <xsd:documentation>Controls how preconditions are evaluated with the update-sql command TEST: Run
                    precondition, FAIL: Fail precondition, IGNORE: Skip precondition check
                    [DEFAULT]</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:attributeGroup>

    <xsd:complexType name="preConditions">
        <xsd:annotation>
            <xsd:documentation><a href='https://docs.liquibase.com/concepts/changelogs/preconditions.html'>Preconditions</a>
                required to execute the changelog.
                If no conditional tags are specified, the default logic is AND for multiple conditions</xsd:documentation>
        </xsd:annotation>
        <xsd:group ref="PreConditionChildren" maxOccurs="unbounded"/>
        <xsd:attributeGroup ref="preConditionsAttributes"/>
        <xsd:attribute name="onFail" type="onChangeSetPreconditionErrorOrFail">
            <xsd:annotation>
                <xsd:documentation>Controls what happens if the preconditions check fails. default: HALT</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="onError" type="onChangeSetPreconditionErrorOrFail">
            <xsd:annotation>
                <xsd:documentation>Controls what happens if there is an error while checking the preconditions. default: HALT</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:complexType>

    <xsd:attributeGroup name="context">
        <xsd:attribute name="context" type="xsd:string">
        <xsd:annotation>
            <xsd:documentation>Deprecated since v4.16. Use @contextFilter instead. If both set, @contextFilter will overwrite</xsd:documentation>
        </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="contextFilter" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>The filter defining which <a href='https://docs.liquibase.com/concepts/changelogs/attributes/contexts.html'>contexts</a>
                    require the entity to take into consideration.
                    It can be a logical expression using AND, OR, !, and parentheses. E.g: "!qa and !main"
                    If empty it is involved in the operation regardless the contexts requested
                    </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:attributeGroup>

    <xsd:attributeGroup name="contextAndLabels">
        <xsd:attributeGroup ref="context"/>
        <xsd:attributeGroup ref="labels"/>
    </xsd:attributeGroup>

    <xsd:attributeGroup name="labels">
        <xsd:attribute name="labels" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>The filter defining which labels are required the entity to take into consideration.
                    If empty it is involved in the operation regardless the labels requested
                    See: https://docs.liquibase.com/concepts/changelogs/attributes/labels.html</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:attributeGroup>

    <xsd:group name="modifySqlChildren">
        <xsd:choice>
            <xsd:element name="replace" minOccurs="0" maxOccurs="unbounded">
                <xsd:complexType>
                    <xsd:attribute name="replace" type="xsd:string" use="required"/>
                    <xsd:attribute name="with" type="xsd:string" use="required"/>
                </xsd:complexType>
            </xsd:element>
            <xsd:element name="regExpReplace" minOccurs="0"
                         maxOccurs="unbounded">
                <xsd:complexType>
                    <xsd:attribute name="replace" type="xsd:string" use="required"/>
                    <xsd:attribute name="with" type="xsd:string" use="required"/>
                </xsd:complexType>
            </xsd:element>
            <xsd:element name="prepend" minOccurs="0" maxOccurs="unbounded">
                <xsd:complexType>
                    <xsd:attribute name="value" type="xsd:string" use="required"/>
                </xsd:complexType>
            </xsd:element>
            <xsd:element name="append" minOccurs="0" maxOccurs="unbounded">
                <xsd:complexType>
                    <xsd:attribute name="value" type="xsd:string" use="required"/>
                </xsd:complexType>
            </xsd:element>
        </xsd:choice>
    </xsd:group>

    <xsd:attributeGroup name="changeSetAttributes">
        <xsd:attribute name="id" type="xsd:string" use="required">
            <xsd:annotation>
                <xsd:documentation>The 2nd part of the changeset's unique id</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="author" type="xsd:string" use="required">
            <xsd:annotation>
                <xsd:documentation>The author of the changeset: the 3rd part of the changeset's unique id</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attributeGroup ref="contextAndLabels"/>
        <xsd:attributeGroup ref="dbms"/>
        <xsd:attribute name="runOnChange" type="booleanExp">
            <xsd:annotation>
                <xsd:documentation>See: <a href='https://docs.liquibase.com/concepts/changelogs/attributes/runonchange.html'>runOnChange</a></xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="runAlways" type="booleanExp">
            <xsd:annotation>
                <xsd:documentation>See <a href='https://docs.liquibase.com/concepts/changelogs/attributes/run-always.html'>runAlways</a></xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="failOnError" type="booleanExp">
            <xsd:annotation>
                <xsd:documentation>Defines whether a database migration will fail if an error occurs while executing
                    the changeset. Default: true.
                    See: <a href='https://docs.liquibase.com/concepts/changelogs/attributes/fail-on-error.html'>failOnError</a></xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="onValidationFail">
            <xsd:annotation>
                <xsd:documentation>Controls what Liquibase does when a changeset fails validation.
                    Values are HALT and MARK_RAN. Default: HALT. Does not relate to checksum validation
                    See <a href='https://docs.liquibase.com/concepts/changelogs/attributes/on-validation-fail.html'>onValidationFail</a></xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
                <xsd:restriction base="xsd:string">
                    <xsd:enumeration value="HALT"/>
                    <xsd:enumeration value="MARK_RAN"/>
                </xsd:restriction>
            </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute name="runInTransaction" type="booleanExp" default="true">
            <xsd:annotation>
                <xsd:documentation>See <a href='https://docs.liquibase.com/concepts/changelogs/attributes/run-in-transaction.html'>runInTransaction</a></xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="logicalFilePath" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>Overrides the file name and path when creating the unique identifier of changesets.
                    It is required when you want to move or rename changelogs.
                    See <a href='https://docs.liquibase.com/concepts/changelogs/attributes/logicalfilepath.html'>logicalFilePath</a></xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="objectQuotingStrategy" type="ObjectQuotingStrategy"/>
        <xsd:attribute name="created" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>Stores dates, versions, or any other string of value without using remarks (comments)
                    attributes. Since v3.5</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="runOrder">
            <xsd:annotation>
                <xsd:documentation>
                    Specifies whether a changeset should be run before or after all other changesets instead of running
                    it sequentially based on its order in the changelog. Valid values are <b>first</b> and <b>last</b>.
                    See: <a href='https://docs.liquibase.com/concepts/changelogs/attributes/run-order.html'>runOrder</a></xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
                <xsd:restriction base="xsd:token">
                    <xsd:enumeration value="first"/>
                    <xsd:enumeration value="last"/>
                </xsd:restriction>
            </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute name="ignore" type="booleanExp">
            <xsd:annotation>
                <xsd:documentation>treat changeset as if it does not exist. since: v3.6 Default: false</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="runWith" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation source="https://docs.liquibase.com/concepts/changelogs/attributes/runwith.html">
                    When the JDBC connection (or executor used by default) cannot process highly specialized SQL,
                    this attribute allows to specify a non-default executor to run SQL defined in &lt;sql&gt; or &lt;sqlFile&gt; changes. Since v3.10
                    See: <a href='https://docs.liquibase.com/concepts/changelogs/attributes/runwith.html'>runWith</a></xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="runWithSpoolFile" type="xsd:string" >
            <xsd:annotation>
                <xsd:documentation>
                    Specifies a spool file to send output to when you deploy a particular changeset. Since v4.21
                    See: <a href='https://docs.liquibase.com/concepts/changelogs/attributes/run-with-spool-file.html'>runWithSpoolFile</a></xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:attributeGroup>

    <!-- Attributes for changes -->
    <xsd:attributeGroup name="changeAttributes">
        <xsd:anyAttribute namespace="##other" processContents="lax"/>
    </xsd:attributeGroup>

    <xsd:attributeGroup name="column">
        <xsd:attribute name="name" type="nonEmptyString" use="required"/>
        <xsd:attribute name="included" type="booleanExp"/>
        <xsd:attribute name="computed" type="booleanExp"/>
        <xsd:attribute name="descending" type="booleanExp"/>
        <xsd:attribute name="type" type="xsd:string"/>
        <xsd:attribute name="value" type="xsd:string"/>
        <xsd:attribute name="valueNumeric" type="xsd:string"/>
        <xsd:attribute name="valueBoolean" type="xsd:string"/>
        <xsd:attribute name="valueDate" type="xsd:string"/>
        <xsd:attribute name="valueComputed" type="xsd:string"/>
        <xsd:attribute name="valueSequenceCurrent" type="xsd:string"/>
        <xsd:attribute name="valueSequenceNext" type="xsd:string"/>
        <xsd:attribute name="valueBlobFile" type="xsd:string"/>
        <xsd:attribute name="valueClobFile" type="xsd:string"/>
        <xsd:attribute name="defaultValue" type="xsd:string"/>
        <xsd:attribute name="defaultValueNumeric" type="xsd:string"/>
        <xsd:attribute name="defaultValueDate" type="xsd:string"/>
        <xsd:attribute name="defaultValueBoolean" type="booleanExp"/>
        <xsd:attribute name="defaultValueComputed" type="xsd:string"/>
        <xsd:attribute name="defaultValueSequenceCurrent" type="xsd:string"/>
        <xsd:attribute name="defaultValueSequenceNext" type="xsd:string"/>
        <xsd:attribute name="defaultValueConstraintName" type="xsd:string"/>
        <xsd:attribute name="autoIncrement" type="booleanExp"/>
        <xsd:attribute name="startWith" type="xsd:long"/>
        <xsd:attribute name="incrementBy" type="xsd:long"/>
        <xsd:attribute name="generationType" type="nonEmptyString"/>
        <xsd:attribute name="defaultOnNull" type="booleanExp"/>
        <xsd:attribute name="remarks" type="xsd:string"/>
        <xsd:attribute name="encoding" type="xsd:string">
            <xsd:annotation>
                <xsd:appinfo>
                    <xsd:documentation>
                        Used with valueClobFile to specify file encoding explicitly.
                    </xsd:documentation>
                </xsd:appinfo>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute namespace="##other" processContents="lax"/>
    </xsd:attributeGroup>

    <xsd:complexType name="column" mixed="true">
        <xsd:sequence>
            <xsd:element name="constraints" type="constraints" minOccurs="0"/>
            <xsd:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:sequence>
        <xsd:attributeGroup ref="column"/>
        <xsd:anyAttribute namespace="##other" processContents="lax"/>
    </xsd:complexType>

    <!-- catalog and schemaName -->
    <xsd:attributeGroup name="catalogAndSchemaName">
        <xsd:attribute name="schemaName" type="xsd:string"/>
        <xsd:attribute name="catalogName" type="xsd:string"/>
        <xsd:attributeGroup ref="changeAttributes"/>
    </xsd:attributeGroup>

    <!-- catalog, schema and required tableName -->
    <xsd:attributeGroup name="tableNameAttribute">
        <xsd:attribute name="tableName" type="nonEmptyString" use="required"/>
        <xsd:attributeGroup ref="catalogAndSchemaName"/>
    </xsd:attributeGroup>

    <!-- catalog, schema, required tableName and columnName -->
    <xsd:attributeGroup name="columnNameAttributes">
        <xsd:attribute name="columnName" type="nonEmptyString" use="required"/>
        <xsd:attributeGroup ref="tableNameAttribute"/>
    </xsd:attributeGroup>

    <xsd:complexType name="addPrimaryKey">
        <xsd:choice maxOccurs="unbounded">
            <xsd:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:choice>
        <xsd:attribute name="columnNames" type="nonEmptyString" use="required"/>
        <xsd:attributeGroup ref="tableNameAttribute"/>
        <xsd:attribute name="constraintName" type="xsd:string"/>
        <xsd:attribute name="tablespace" type="xsd:string"/>
        <xsd:attribute name="clustered" type="booleanExp"/>
        <xsd:attribute name="forIndexName" type="xsd:string"/>
        <xsd:attribute name="forIndexSchemaName" type="xsd:string"/>
        <xsd:attribute name="forIndexCatalogName" type="xsd:string"/>
        <xsd:attribute name="validate" type="booleanExp"/>
    </xsd:complexType>

    <xsd:complexType name="dropPrimaryKey">
        <xsd:attribute name="constraintName" type="xsd:string"/>
        <xsd:attributeGroup ref="tableNameAttribute"/>
        <xsd:attribute name="dropIndex" type="booleanExp"/>
    </xsd:complexType>

    <xsd:complexType name="addUniqueConstraint">
         <xsd:choice maxOccurs="unbounded">
            <xsd:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded" />
        </xsd:choice>
        <xsd:attribute name="columnNames" type="nonEmptyString" use="required"/>
        <xsd:attributeGroup ref="tableNameAttribute"/>
        <xsd:attribute name="constraintName" type="xsd:string"/>
        <xsd:attribute name="tablespace" type="xsd:string"/>
        <xsd:attribute name="disabled" type="booleanExp"/>
        <xsd:attribute name="deferrable" type="booleanExp"/>
        <xsd:attribute name="initiallyDeferred" type="booleanExp"/>
        <xsd:attribute name="forIndexCatalogName" type="xsd:string"/>
        <xsd:attribute name="forIndexSchemaName" type="xsd:string"/>
        <xsd:attribute name="forIndexName" type="xsd:string"/>
        <xsd:attribute name="clustered" type="booleanExp"/>
        <xsd:attribute name="validate" type="booleanExp"/>
    </xsd:complexType>

    <xsd:complexType name="dropUniqueConstraint">
        <xsd:attribute name="constraintName" type="xsd:string" use="required"/>
        <xsd:attributeGroup ref="tableNameAttribute"/>
        <xsd:attribute name="uniqueColumns" type="xsd:string"/>
    </xsd:complexType>

    <xsd:complexType name="modifyDataType">
        <xsd:attributeGroup ref="changeAttributes"/>
        <xsd:attribute name="newDataType" type="nonEmptyString" use="required"/>
        <xsd:attributeGroup ref="columnNameAttributes"/>
    </xsd:complexType>

    <xsd:complexType name="addLookupTable">
        <xsd:attributeGroup ref="changeAttributes"/>
        <xsd:attribute name="existingTableCatalogName" type="xsd:string"/>
        <xsd:attribute name="existingTableSchemaName" type="xsd:string"/>
        <xsd:attribute name="existingTableName" type="xsd:string"
                       use="required"/>
        <xsd:attribute name="existingColumnName" type="xsd:string"
                       use="required"/>
        <xsd:attribute name="newTableCatalogName" type="xsd:string"/>
        <xsd:attribute name="newTableSchemaName" type="xsd:string"/>
        <xsd:attribute name="newTableName" type="xsd:string"
                       use="required"/>
        <xsd:attribute name="newColumnName" type="xsd:string"
                       use="required"/>
        <xsd:attribute name="newColumnDataType" type="xsd:string"/>
        <xsd:attribute name="constraintName" type="xsd:string"/>
    </xsd:complexType>

    <xsd:complexType name="addAutoIncrement">
        <xsd:attribute name="columnName" type="nonEmptyString" use="required"/>
        <xsd:attribute name="tableName" type="nonEmptyString" use="required"/>
        <xsd:attribute name="columnDataType" type="xsd:string"/>
        <xsd:attribute name="startWith" type="xsd:long"/>
        <xsd:attribute name="incrementBy" type="xsd:long"/>
        <xsd:attribute name="defaultOnNull" type="booleanExp"/>
        <xsd:attribute name="generationType" type="xsd:string"/>
        <xsd:attributeGroup ref="catalogAndSchemaName"/>
    </xsd:complexType>

    <xsd:complexType name="addDefaultValue">
        <xsd:attribute name="columnName" type="nonEmptyString" use="required"/>
        <xsd:attribute name="tableName" type="nonEmptyString" use="required"/>
        <xsd:attribute name="defaultValue" type="xsd:string"/>
        <xsd:attribute name="defaultValueNumeric" type="xsd:string"/>
        <xsd:attribute name="defaultValueDate" type="xsd:string"/>
        <xsd:attribute name="defaultValueBoolean" type="xsd:string"/>
        <xsd:attribute name="defaultValueComputed" type="xsd:string"/>
        <xsd:attribute name="defaultValueSequenceNext" type="xsd:string"/>
        <xsd:attribute name="defaultValueConstraintName" type="xsd:string"/>
        <xsd:attribute name="columnDataType" type="xsd:string"/>
        <xsd:attributeGroup ref="catalogAndSchemaName"/>
    </xsd:complexType>

    <xsd:complexType name="dropDefaultValue">
        <xsd:attributeGroup ref="columnNameAttributes"/>
        <xsd:attribute name="columnDataType" type="xsd:string"/>
    </xsd:complexType>

    <xsd:simpleType name="nonEmptyString">
        <xsd:annotation>
            <xsd:documentation>String containing at least 1 non whitespace character</xsd:documentation>
        </xsd:annotation>
        <xsd:restriction base="xsd:string">
            <xsd:pattern value="[\S\t].*"/>
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:attributeGroup name="loadDataAttributes">
        <xsd:attribute name="file" type="nonEmptyString" use="required"/>
        <xsd:attributeGroup ref="relativeToChangelogFile"/>
        <xsd:attribute name="encoding" type="xsd:NMTOKEN"/>
        <xsd:attribute name="separator" type="nonEmptyString" default=",">
            <xsd:annotation>
                <xsd:documentation>Character separating the fields. Default: ','</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="quotchar" type="nonEmptyString" default="&quot;"/>
        <xsd:attribute name="commentLineStartsWith" type="nonEmptyString" default="#"/>
        <xsd:attribute name="usePreparedStatements" type="booleanExp"/>
    </xsd:attributeGroup>

    <xsd:complexType name="loadDataColumn">
        <xsd:annotation>
        	<xsd:documentation>Column definition.
                Either @name or @index must be defined to be able to identify the column in the CSV
                If the column name in the CSV is different than in the table, @header needs to be defined to the column name in the CSV.
                One of the @defaultValue* attributes can define value for empty values in CSV.</xsd:documentation>
        </xsd:annotation>
        <xsd:attribute name="name" type="nonEmptyString" use="required">
            <xsd:annotation>
                <xsd:documentation>Name of the table column. If the column name in CSV is different @header or @index shall be also defined</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="index" type="integerExp">
            <xsd:annotation>
            	<xsd:documentation>Index of the column in the CSV file from which the value for the column will be taken. Required if column name in the CSV is different from the table's column name</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="header" type="xsd:string">
            <xsd:annotation>
            	<xsd:documentation>Name of the column in the CSV file from which the value for the column will be taken if it's different from the column name. Ignored if @index is also defined.</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="type" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>Type of the column. If not defined, it is taken from the database
                    Special value 'skip' force not to change the column content</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="defaultValue" type="xsd:string"/>
        <xsd:attribute name="defaultValueNumeric" type="xsd:string"/>
        <xsd:attribute name="defaultValueDate" type="xsd:string"/>
        <xsd:attribute name="defaultValueBoolean" type="booleanExp"/>
        <xsd:attribute name="defaultValueComputed" type="xsd:string"/>
        <!-- TODO add nullPlaceholder -->
    </xsd:complexType>

    <xsd:complexType mixed="true" name="loadData">
        <xsd:annotation>
            <xsd:documentation source="https://docs.liquibase.com/change-types/load-data.html">
                Load data from a CSV defined @file into an existing table defined by @tableName.
                Nested column tags can define type, default value and name mapping if columns in the CSV have different name as the table column needs to be loaded into
                All CSV columns are used by default while generating SQL even if they are not described by a column
            </xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="column" type="loadDataColumn" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:sequence>
        <xsd:attribute name="tableName" type="nonEmptyString" use="required">
            <xsd:annotation>
                <xsd:documentation>Name of the table to insert data into</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attributeGroup ref="loadDataAttributes"/>
        <xsd:attributeGroup ref="catalogAndSchemaName"/>
    </xsd:complexType>

    <xsd:complexType mixed="true" name="loadUpdateData">
        <xsd:annotation>
        	<xsd:documentation source='https://docs.liquibase.com/change-types/load-update-data.html'>Loads or updates data from a CSV file into an existing table.
             Differs from loadData by issuing a SQL batch that checks for the existence of a record. If found, the record is UPDATEd, else the record is INSERTed</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="column" minOccurs="0" maxOccurs="unbounded">
            	<xsd:complexType >
                    <xsd:annotation>
                    	<xsd:documentation>Column definition.
                        Either @name or @index must be defined to be able to identify the column in the CSV
                        If the header name in the CSV is different than the name of the table column, @header needs to be defined.
                        One of the @defaultValue* attributes can define value for empty values in CSV</xsd:documentation>
                    </xsd:annotation>
                    <xsd:complexContent>
                       <xsd:extension base="loadDataColumn">
                           <xsd:attribute name="allowUpdate" type="booleanExp">
                               <xsd:annotation>
                               	<xsd:documentation>If set to false, only inserts are generated for the column. Default: true</xsd:documentation>
                               </xsd:annotation>
                           </xsd:attribute>
                       </xsd:extension>
                   </xsd:complexContent>
            	</xsd:complexType>
            </xsd:element>
        </xsd:sequence>
        <xsd:attribute name="tableName" type="nonEmptyString" use="required">
            <xsd:annotation>
                <xsd:documentation>Name of the table to insert or update data in</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="primaryKey" type="nonEmptyString" use="required">
            <xsd:annotation>
        		    <xsd:documentation>Comma delimited list of the columns for the primary key used to identify existing rows</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attributeGroup ref="loadDataAttributes"/>
        <xsd:attributeGroup ref="catalogAndSchemaName"/>
        <xsd:attribute name="onlyUpdate" type="booleanExp">
            <xsd:annotation>
        		    <xsd:documentation>If true, records with no matching database record should be ignored</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:complexType>

    <xsd:simpleType name="FkCascadeActionOptions">
        <xsd:restriction base="xsd:token">
            <xsd:enumeration value="CASCADE"></xsd:enumeration>
            <xsd:enumeration value="SET NULL"></xsd:enumeration>
            <xsd:enumeration value="SET DEFAULT"></xsd:enumeration>
            <xsd:enumeration value="RESTRICT"></xsd:enumeration>
            <xsd:enumeration value="NO ACTION"></xsd:enumeration>
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:complexType name="addForeignKeyConstraint">
        <xsd:attributeGroup ref="changeAttributes"/>
        <xsd:attributeGroup ref="baseTableNameAttributes"/>
        <xsd:attribute name="baseColumnNames" type="xsd:string"
                       use="required"/>
        <xsd:attribute name="constraintName" type="xsd:string"
                       use="required"/>
        <xsd:attribute name="referencedTableName" type="xsd:string"
                       use="required"/>
        <xsd:attribute name="referencedColumnNames" type="xsd:string"
                       use="required"/>
        <xsd:attribute name="referencedTableSchemaName" type="xsd:string"/>
        <xsd:attribute name="referencedTableCatalogName" type="xsd:string"/>
        <xsd:attribute name="deferrable" type="booleanExp"/>
        <xsd:attribute name="initiallyDeferred" type="booleanExp"/>
        <xsd:attribute name="deleteCascade" type="booleanExp"/>
        <xsd:attribute name="onDelete" type="FkCascadeActionOptions"/>
        <xsd:attribute name="onUpdate" type="FkCascadeActionOptions"/>
        <xsd:attribute name="referencesUniqueColumn" type="booleanExp"/>
        <xsd:attribute name="validate" type="booleanExp"/>
    </xsd:complexType>

    <xsd:complexType name="addNotNullConstraint">
        <xsd:attributeGroup ref="columnNameAttributes"/>
        <xsd:attribute name="defaultNullValue" type="xsd:string"/>
        <xsd:attribute name="columnDataType" type="xsd:string"/>
        <xsd:attribute name="constraintName" type="xsd:string"/>
        <xsd:attribute name="validate" type="booleanExp"/>
    </xsd:complexType>

    <xsd:complexType name="dbms">
        <xsd:annotation>
            <xsd:documentation>Check if the database the changelog executed on matches to @type</xsd:documentation>
        </xsd:annotation>
        <xsd:attribute name="type" type="xsd:string" use="required">
            <xsd:annotation>
                <xsd:documentation>Expected database type</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:complexType>

    <xsd:complexType name="changeSetExecuted">
        <xsd:annotation>
            <xsd:documentation>Check if the changeset identified by @changeLogFile :: @id :: @author
                has already been executed in a previous deployment</xsd:documentation>
        </xsd:annotation>
        <xsd:attribute name="id" type="xsd:string" use="required"/>
        <xsd:attribute name="author" type="xsd:string" use="required"/>
        <xsd:attribute name="changeLogFile" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>File name of the changelog. If not set the actual (logical) file name is used</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:complexType>

    <xsd:complexType name="tableExists">
        <xsd:annotation>
            <xsd:documentation>Checks if table with @tableName exists in the database</xsd:documentation>
        </xsd:annotation>
        <xsd:attributeGroup ref="tableNameAttribute"/>
    </xsd:complexType>

    <xsd:complexType name="columnExists">
        <xsd:annotation>
            <xsd:documentation>Check if column @columnName exists in the table @tableName </xsd:documentation>
        </xsd:annotation>
        <xsd:attributeGroup ref="columnNameAttributes"/>
    </xsd:complexType>

    <xsd:complexType name="sequenceExists">
        <xsd:attribute name="sequenceName" type="nonEmptyString" use="required"/>
        <xsd:attributeGroup ref="catalogAndSchemaName"/>
    </xsd:complexType>

    <xsd:complexType name="foreignKeyConstraintExists">
        <xsd:attribute name="foreignKeyName" type="nonEmptyString" use="required"/>
        <xsd:attribute name="foreignKeyTableName" type="xsd:string"/>
        <xsd:attributeGroup ref="catalogAndSchemaName"/>
    </xsd:complexType>

    <xsd:complexType name="indexExists">
        <xsd:annotation>
            <xsd:documentation>Check if the index referenced by @indexName or @tableName and @columnNames
               Either @indexName or @tableName and @columnNames is required</xsd:documentation>
        </xsd:annotation>
        <xsd:attribute name="indexName" type="nonEmptyString"/>
        <xsd:attribute name="tableName" type="nonEmptyString"/>
        <xsd:attribute name="columnNames" type="nonEmptyString"/>
        <xsd:attributeGroup ref="catalogAndSchemaName"/>
    </xsd:complexType>

    <xsd:complexType name="uniqueConstraintExists">
        <xsd:annotation>
        	   <xsd:documentation>Check if unique key exists on table defined by @tableName. Either @primaryKeyName or @tableName required</xsd:documentation>
        </xsd:annotation>
        <xsd:attribute name="constraintName" type="xsd:string"/>
        <xsd:attribute name="tableName" type="xsd:string" use="required"/>
        <xsd:attribute name="columnNames" type="xsd:string"/>
        <xsd:attributeGroup ref="catalogAndSchemaName"/>
    </xsd:complexType>

    <xsd:complexType name="rowCount">
        <xsd:attribute name="expectedRows" type="xsd:long" use="required"/>
        <xsd:attributeGroup ref="tableNameAttribute"/>
    </xsd:complexType>

    <xsd:complexType name="tableIsEmpty">
        <xsd:attributeGroup ref="tableNameAttribute"/>
    </xsd:complexType>

    <xsd:complexType name="changeLogPropertyDefined">
        <xsd:annotation>
            <xsd:documentation>Check if the changeLog property with the name in @property is set to @value.
                    If @value is not defined checks only if the property is defined at all</xsd:documentation>
        </xsd:annotation>
        <xsd:attribute name="property" type="propertyName" use="required"/>
        <xsd:attribute name="value" type="xsd:string"/>
    </xsd:complexType>

    <xsd:complexType name="primaryKeyExists">
        <xsd:annotation>
            <xsd:documentation>Check if primary key exists. Either @primaryKeyName or @tableName required depending on the database type</xsd:documentation>
        </xsd:annotation>
        <xsd:attribute name="primaryKeyName" type="nonEmptyString"/>
        <xsd:attribute name="tableName" type="xsd:string"/>
        <xsd:attributeGroup ref="catalogAndSchemaName"/>
    </xsd:complexType>

    <xsd:complexType name="viewExists">
        <xsd:attribute name="viewName" type="nonEmptyString" use="required"/>
        <xsd:attributeGroup ref="catalogAndSchemaName"/>
    </xsd:complexType>

    <xsd:complexType mixed="true" name="sqlCheck">
        <xsd:annotation> <!-- TODO check empty content -->
            <xsd:documentation>Executes the SQL statement in the content and checks the returned value
                matches the value defined in @expectedResult
                The SQL must return a single row with a single value.</xsd:documentation>
        </xsd:annotation>
        <xsd:attribute name="expectedResult" type="xsd:string" use="required"/>
    </xsd:complexType>

    <xsd:complexType name="customPrecondition">
            <xsd:sequence>
                <xsd:element name="param" minOccurs="0" maxOccurs="unbounded">
                    <xsd:complexType>
                        <xsd:attribute name="name" type="nonEmptyString" use="required"/>
                        <xsd:attribute name="value" type="xsd:string" use="required"/>
                    </xsd:complexType>
                </xsd:element>
            </xsd:sequence>
        <xsd:attribute name="className" type="nonEmptyString" use="required"/>
    </xsd:complexType>

    <xsd:complexType name="preconditionContainer">
        <xsd:group ref="PreConditionChildren" minOccurs="2" maxOccurs="unbounded"/>
    </xsd:complexType>

    <xsd:complexType name="not">
        <xsd:annotation>
            <xsd:documentation>Logical NOT operator. For multiple children AND logic is used</xsd:documentation>
        </xsd:annotation>
        <xsd:group ref="PreConditionChildren" maxOccurs="unbounded"/>
    </xsd:complexType>

    <xsd:complexType name="runningAs">
        <xsd:annotation>
            <xsd:documentation>Check if the name of the database user executing the change log matches the @username</xsd:documentation>
        </xsd:annotation>
        <xsd:attribute name="username" type="xsd:string" use="required">
            <xsd:annotation>
                <xsd:documentation>The name of the database user expected executing the change log</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:complexType>

    <xsd:complexType name="expectedQuotingStrategy">
        <xsd:annotation>
            <xsd:documentation>Precondition that checks if objectQuotingStrategy set for the changelog matches to @strategy</xsd:documentation>
        </xsd:annotation>
        <xsd:attribute name="strategy" type="ObjectQuotingStrategy" use="required">
            <xsd:annotation>
                <xsd:documentation>ObjectQuotingStrategy expected to be set for the changelog</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:complexType>

    <xsd:attributeGroup name="baseTableNameAttributes">
        <xsd:attribute name="baseTableName" type="nonEmptyString" use="required"/>
        <xsd:attribute name="baseTableSchemaName" type="xsd:string"/>
        <xsd:attribute name="baseTableCatalogName" type="xsd:string"/>
    </xsd:attributeGroup>

    <xsd:complexType name="dropForeignKeyConstraint">
        <xsd:attribute name="constraintName" type="nonEmptyString" use="required"/>
        <xsd:attributeGroup ref="changeAttributes"/>
        <xsd:attributeGroup ref="baseTableNameAttributes"/>
    </xsd:complexType>

    <xsd:complexType name="dropAllForeignKeyConstraints">
        <xsd:attributeGroup ref="baseTableNameAttributes"/>
        <xsd:attributeGroup ref="changeAttributes"/>
    </xsd:complexType>

    <xsd:complexType name="dropNotNullConstraint">
        <xsd:attribute name="constraintName" type="xsd:string"/>
        <xsd:attributeGroup ref="tableNameAttribute"/>
        <xsd:attribute name="columnName" type="xsd:string"/>
        <xsd:attribute name="columnDataType" type="xsd:string"/>
    </xsd:complexType>

    <xsd:complexType name="setTableRemarks">
        <xsd:attribute name="remarks" type="xsd:string" use="required"/>
        <xsd:attributeGroup ref="tableNameAttribute"/>
    </xsd:complexType>

    <xsd:simpleType name="ColumnParentTypeEnum">
        <xsd:restriction base="xsd:string">
            <xsd:enumeration value="TABLE"/>
            <xsd:enumeration value="VIEW"/>
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:complexType name="setColumnRemarks">
        <xsd:attribute name="remarks" type="xsd:string" use="required"/>
        <xsd:attributeGroup ref="columnNameAttributes"/>
        <xsd:attribute name="columnDataType" type="xsd:string"/>
        <xsd:attribute name="columnParentType" type="ColumnParentTypeEnum"/>
    </xsd:complexType>

    <xsd:complexType name="constraints">
        <xsd:attribute name="nullable" type="booleanExp"/>
        <xsd:attribute name="notNullConstraintName" type="xsd:string"/>
        <xsd:attribute name="primaryKey" type="booleanExp"/>
        <xsd:attribute name="primaryKeyName" type="xsd:string"/>
        <xsd:attribute name="primaryKeyTablespace" type="xsd:string"/>
        <xsd:attribute name="unique" type="booleanExp"/>
        <xsd:attribute name="uniqueConstraintName" type="xsd:string"/>
        <xsd:attribute name="references" type="xsd:string"/>
        <xsd:attribute name="referencedTableCatalogName" type="xsd:string"/>
        <xsd:attribute name="referencedTableSchemaName" type="xsd:string"/>
        <xsd:attribute name="referencedTableName" type="xsd:string"/>
        <xsd:attribute name="referencedColumnNames" type="xsd:string"/>
        <xsd:attribute name="foreignKeyName" type="xsd:string"/>
        <xsd:attribute name="deleteCascade" type="booleanExp"/>
        <xsd:attribute name="deferrable" type="booleanExp"/>
        <xsd:attribute name="initiallyDeferred" type="booleanExp"/>
        <xsd:attribute name="checkConstraint" type="xsd:string"/>
        <xsd:attribute name="validateNullable" type="booleanExp"/>
        <xsd:attribute name="validateUnique" type="booleanExp"/>
        <xsd:attribute name="validatePrimaryKey" type="booleanExp"/>
        <xsd:attribute name="validateForeignKey" type="booleanExp"/>
    </xsd:complexType>

    <xsd:complexType name="createTable">
        <xsd:annotation>
            <xsd:documentation>Create a table with the defined columns</xsd:documentation>
        </xsd:annotation>
        <xsd:choice maxOccurs="unbounded">
            <xsd:element name="column" type="column" maxOccurs="unbounded"/>
            <xsd:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:choice>
        <xsd:attribute name="tableName" type="nonEmptyString" use="required"/>
        <xsd:attribute name="ifNotExists" type="booleanExp"/>
        <xsd:attributeGroup ref="catalogAndSchemaName"/>
        <xsd:attribute name="tablespace" type="xsd:string"/>
        <xsd:attribute name="tableType" type="xsd:string"/>
        <xsd:attribute name="remarks" type="xsd:string"/>
        <xsd:attribute name="rowDependencies" type="booleanExp" default="false"/>
    </xsd:complexType>

    <xsd:complexType name="createView">
        <xsd:simpleContent>
            <xsd:extension base="xsd:string">
                <xsd:attribute name="viewName" type="nonEmptyString" use="required"/>
                <xsd:attribute name="replaceIfExists" type="booleanExp"/>
                <xsd:attribute name="fullDefinition" type="booleanExp"/>
                <xsd:attribute name="path" type="nonEmptyString"/>
                <xsd:attributeGroup ref="relativeToChangelogPath"/>
                <xsd:attribute name="remarks" type="xsd:string"/>
                <xsd:attribute name="encoding" type="xsd:string"/>
                <xsd:attributeGroup ref="catalogAndSchemaName"/>
            </xsd:extension>
        </xsd:simpleContent>
    </xsd:complexType>

    <xsd:complexType name="insert">
        <xsd:annotation>
            <xsd:documentation>Inserts data into an existing table</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="column" type="column" maxOccurs="unbounded"/>
        </xsd:sequence>
        <xsd:attributeGroup ref="tableNameAttribute"/>
        <xsd:attributeGroup ref="dbms"/>
    </xsd:complexType>

    <xsd:complexType mixed="true" name="update">
        <xsd:annotation>
            <xsd:documentation>Update data in the specified table</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="column" type="column" maxOccurs="unbounded"/>
            <xsd:element name="where" minOccurs="0" maxOccurs="1" type="xsd:string"/>
            <xsd:element name="whereParams" type="whereParams" minOccurs="0" maxOccurs="1"/>
        </xsd:sequence>
       <xsd:attributeGroup ref="tableNameAttribute"/>
    </xsd:complexType>

    <xsd:complexType mixed="true" name="whereParams">
        <xsd:sequence>
            <xsd:element name="param" type="param" minOccurs="1" maxOccurs="unbounded"/>
        </xsd:sequence>
    </xsd:complexType>

    <xsd:complexType name="param">
        <xsd:attribute name="name" type="xsd:string"/>
        <xsd:attribute name="value" type="xsd:string"/>
        <xsd:attribute name="valueNumeric" type="xsd:string"/>
        <xsd:attribute name="valueBoolean" type="xsd:string"/>
        <xsd:attribute name="valueDate" type="xsd:string"/>
        <xsd:attribute name="valueComputed" type="xsd:string"/>
        <xsd:attribute name="valueSequenceNext" type="xsd:string"/>
        <xsd:attribute name="valueSequenceCurrent" type="xsd:string"/>
    </xsd:complexType>

    <xsd:complexType mixed="true" name="delete">
        <xsd:sequence>
            <xsd:element name="where" minOccurs="0" maxOccurs="1"/>
            <xsd:element name="whereParams" type="whereParams" minOccurs="0" maxOccurs="1"/>
        </xsd:sequence>
        <xsd:attributeGroup ref="tableNameAttribute"/>
    </xsd:complexType>

    <xsd:complexType name="addColumn">
        <xsd:sequence>
            <xsd:element name="column" minOccurs="1" maxOccurs="unbounded">
                <xsd:complexType>
                    <xsd:complexContent>
                        <xsd:extension base="column">
                            <xsd:attribute name="beforeColumn" type="xsd:string"/>
                            <xsd:attribute name="afterColumn" type="xsd:string"/>
                            <xsd:attribute name="position" type="integerExp"/>
                        </xsd:extension>
                    </xsd:complexContent>
                </xsd:complexType>
            </xsd:element>
        </xsd:sequence>
        <xsd:attributeGroup ref="tableNameAttribute"/>
    </xsd:complexType>

    <xsd:complexType mixed="true" name="rollback">
        <xsd:annotation>
            <xsd:documentation source="https://docs.liquibase.com/workflows/liquibase-community/using-rollback.html">
            </xsd:documentation>
        </xsd:annotation>
        <xsd:choice>
            <xsd:group ref="ChangeSetChildren" minOccurs="0"
                       maxOccurs="unbounded"/>
        </xsd:choice>
        <xsd:attribute name="changeSetId" type="nonEmptyString" use="required"/>
        <xsd:attribute name="changeSetAuthor" type="xsd:string" use="required"/>
        <xsd:attribute name="changeSetPath" type="xsd:string"/>
    </xsd:complexType>
    
    <xsd:group name="comment">
        <xsd:annotation>

        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="comment" minOccurs="0" maxOccurs="1"/>
        </xsd:sequence>
    </xsd:group>

    <xsd:complexType mixed="true" name="sql">
        <xsd:annotation>
            <xsd:documentation>Execute any SQL statement(s) in the content.
                The SQL change can also contain comments of either of the following formats:
                A multi-line comment that starts with /* and ends with *&#47;.
                A single line comment starting with -- and finishing at the end of the line.
                or a comment element can be used
            </xsd:documentation>
        </xsd:annotation>
        <xsd:group ref="comment"/>
        <xsd:attributeGroup ref="sqlAttributes"/>
    </xsd:complexType>

    <xsd:complexType mixed="true" name="createProcedure">
        <xsd:annotation>
            <xsd:documentation source="https://docs.liquibase.com/change-types/create-procedure.html">
                Create a definition for a stored procedure from either the tag content or from file defined by @path.</xsd:documentation>
        </xsd:annotation>
        <xsd:group ref="comment">
            <xsd:annotation>
                <xsd:documentation>Ignored</xsd:documentation>
            </xsd:annotation>
        </xsd:group>
        <xsd:attribute name="procedureName" type="nonEmptyString">
            <xsd:annotation>
                <xsd:documentation>Name of the stored procedure. Required if replaceIfExists=true.</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="path" type="nonEmptyString">
            <xsd:annotation>
                <xsd:documentation>File containing the procedure text. Either this attribute or a nested procedure text is required.</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="encoding" type="xsd:string"/>
        <xsd:attributeGroup ref="relativeToChangelogPath"/>
        <xsd:attributeGroup ref="dbms"/>
        <xsd:attribute name="replaceIfExists" type="booleanExp">
            <xsd:annotation>
                <xsd:documentation>If the stored procedure defined by @procedureName already exists, alter it instead of creating it. Default: false.</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attributeGroup ref="catalogAndSchemaName"/>
    </xsd:complexType>

    <xsd:complexType name="executeCommand">
        <xsd:annotation>
            <xsd:documentation source="https://docs.liquibase.com/change-types/execute-command.html">
                Execute a shell command.</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="arg" minOccurs="0" maxOccurs="unbounded">
                <xsd:complexType>
                    <xsd:attribute name="value" type="nonEmptyString" use="required"/>
                </xsd:complexType>
            </xsd:element>
        </xsd:sequence>
        <xsd:attributeGroup ref="changeAttributes"/>
        <xsd:attribute name="executable" type="nonEmptyString" use="required"/>
        <xsd:attribute name="os" type="xsd:string"/>
        <xsd:attribute name="timeout" type="xsd:string"/>
    </xsd:complexType>

    <xsd:attributeGroup name="sqlAttributes">
        <xsd:attribute name="stripComments" type="booleanExp">
            <xsd:annotation>
                <xsd:documentation>When true, any comments are removed in the statement before executing on the database. Default: true.</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>

        <xsd:attribute name="splitStatements" type="booleanExp">
            <xsd:annotation>
                <xsd:documentation>When true, Liquibase splits statements on @endDelimiter and executes them separately. Default: true.</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>

        <xsd:attribute name="endDelimiter" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>The delimiter to separate raw SQL statements. The default value is `;`
                    See: https://docs.liquibase.com/change-types/enddelimiter-sql.html</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attributeGroup ref="dbms"/>
        <xsd:attributeGroup ref="changeAttributes"/>
    </xsd:attributeGroup>

    <xsd:attributeGroup name="dbms">
        <xsd:attribute name="dbms" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>Specifies which database type(s) a changeset is to be used for.
                    See valid database type names on <a href='https://docs.liquibase.com/start/tutorials/home.html'>Liquibase Database Tutorials</a>
                    . Separate multiple databases with commas. Specify that a changeset is not applicable to a particular
                    database type by prefixing with !. The keywords <pre>all</pre> and none are also available.
                    Will run for all dbms' if empty or absent</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:attributeGroup>

    <xsd:attributeGroup name="relativeToChangelogPath">
        <xsd:attribute name="relativeToChangelogFile" type="booleanExp">
            <xsd:annotation>
                <xsd:documentation>Specifies whether the path defined in @path is relative to the
                    changelog file rather than looked up in the search path. Default: false
                    See: https://docs.liquibase.com/concepts/changelogs/how-liquibase-finds-files.html
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:attributeGroup>

    <xsd:attributeGroup name="relativeToChangelogFile">
        <xsd:attribute name="relativeToChangelogFile" type="booleanExp">
            <xsd:annotation>
                <xsd:documentation>Specifies whether the file name defined in @file is relative to the
                    changelog file rather than looked up in the search path. Default: false
                    See: https://docs.liquibase.com/concepts/changelogs/how-liquibase-finds-files.html
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:attributeGroup>

    <xsd:complexType name="sqlFile">
        <xsd:annotation>
            <xsd:documentation>Execute any SQL statement(s) in the external file defined in @path.
                The SQL can also contain comments of either of the following formats:
                A multi-line comment that starts with /* and ends with *&#47;.
                A single line comment starting with -- and finishing at the end of the line.
                or a comment element can be used</xsd:documentation>
        </xsd:annotation>
        <xsd:attribute name="path" type="nonEmptyString" use="required">
            <xsd:annotation>
                <xsd:documentation>Name of the file containing the SQL statements to execute</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attributeGroup ref="relativeToChangelogPath"/>
        <xsd:attributeGroup ref="sqlAttributes"/>
        <xsd:attribute name="encoding" type="xsd:string" default="UTF-8"/>
    </xsd:complexType>

    <xsd:complexType name="tagDatabase">
        <xsd:annotation>
            <xsd:documentation>Apply tag defined in @tag to the database for future update or rollback</xsd:documentation>
        </xsd:annotation>
        <xsd:attributeGroup ref="changeAttributes"/>
        <xsd:attribute name="tag" type="nonEmptyString" use="required"/>
    </xsd:complexType>

    <xsd:complexType name="stop" mixed="true">
        <xsd:attributeGroup ref="changeAttributes"/>
    </xsd:complexType>

    <xsd:complexType name="empty">
        <xsd:attributeGroup ref="changeAttributes"/>
    </xsd:complexType>

    <xsd:complexType name="output" mixed="true">
        <xsd:attribute name="target" type="xsd:string"/>
    </xsd:complexType>

    <xsd:complexType name="renameTable">
        <xsd:attribute name="oldTableName" type="nonEmptyString" use="required"/>
        <xsd:attribute name="newTableName" type="nonEmptyString" use="required"/>
        <xsd:attributeGroup ref="catalogAndSchemaName"/>
    </xsd:complexType>

    <xsd:complexType name="renameView">
        <xsd:attribute name="oldViewName" type="nonEmptyString" use="required"/>
        <xsd:attribute name="newViewName" type="nonEmptyString" use="required"/>
        <xsd:attributeGroup ref="catalogAndSchemaName"/>
    </xsd:complexType>

    <xsd:complexType name="dropTable">
        <xsd:attribute name="tableName" type="nonEmptyString" use="required"/>
        <xsd:attribute name="cascadeConstraints" type="booleanExp"/>
        <xsd:attributeGroup ref="catalogAndSchemaName"/>
    </xsd:complexType>

    <xsd:complexType name="dropView">
        <xsd:attribute name="viewName" type="nonEmptyString" use="required"/>
        <xsd:attribute name="ifExists" type="booleanExp"/>
        <xsd:attributeGroup ref="catalogAndSchemaName"/>
    </xsd:complexType>

    <xsd:complexType name="dropProcedure">
        <xsd:attribute name="procedureName" type="nonEmptyString" use="required"/>
        <xsd:attributeGroup ref="catalogAndSchemaName"/>
    </xsd:complexType>

    <xsd:complexType name="renameColumn">
        <xsd:attribute name="oldColumnName" type="nonEmptyString" use="required"/>
        <xsd:attribute name="newColumnName" type="nonEmptyString" use="required"/>
        <xsd:attributeGroup ref="tableNameAttribute"/>
        <xsd:attribute name="columnDataType" type="xsd:string"/>
        <xsd:attribute name="remarks" type="xsd:string"/>
    </xsd:complexType>

    <xsd:complexType name="ColumnName">
        <xsd:attribute name="name" type="nonEmptyString" use="required"/>
    </xsd:complexType>

    <xsd:complexType name="dropColumn">
        <xsd:annotation>
            <xsd:documentation>Drop column(s). Either @columnName or nested column(s) needs to be defined exclusively</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="column" minOccurs="0" maxOccurs="unbounded" type="ColumnName"/>
        </xsd:sequence>
        <xsd:attribute name="tableName" type="nonEmptyString" use="required"/>
        <xsd:attribute name="columnName" type="nonEmptyString">
            <xsd:annotation>
                <xsd:documentation>Name of the column to drop, if dropping a single column. Ignore if nested columns are defined </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attributeGroup ref="catalogAndSchemaName"/>
    </xsd:complexType>

    <xsd:complexType name="mergeColumns">
        <xsd:attribute name="column1Name" type="nonEmptyString"
                           use="required"/>
        <xsd:attribute name="joinString" type="xsd:string" use="required"/>
        <xsd:attribute name="column2Name" type="nonEmptyString"
                           use="required"/>
        <xsd:attribute name="finalColumnName" type="nonEmptyString"
                           use="required"/>
        <xsd:attribute name="finalColumnType" type="nonEmptyString"
                           use="required"/>
        <xsd:attributeGroup ref="tableNameAttribute"/>
    </xsd:complexType>

    <xsd:attributeGroup name="sequenceAttributes">
        <xsd:attribute name="incrementBy" type="integerExp"/>
        <xsd:attribute name="minValue" type="integerExp"/>
        <xsd:attribute name="maxValue" type="integerExp"/>
        <xsd:attribute name="ordered" type="booleanExp"/>
        <xsd:attribute name="cacheSize" type="xsd:string"/>
        <xsd:attribute name="dataType" type="xsd:string" />
        <xsd:attribute name="cycle" type="booleanExp">
            <xsd:annotation>
                <xsd:documentation>true for a cycling sequence, false for a non-cycling sequence.
                    Default: false.</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attributeGroup ref="catalogAndSchemaName"/>
    </xsd:attributeGroup>

    <xsd:complexType name="createSequence">
        <xsd:attribute name="sequenceName" type="nonEmptyString" use="required"/>
        <xsd:attribute name="startValue" type="integerExp"/>
        <xsd:attributeGroup ref="sequenceAttributes"/>
    </xsd:complexType>

    <xsd:complexType name="alterSequence">
        <xsd:attribute name="sequenceName" type="nonEmptyString" use="required"/>
        <xsd:attributeGroup ref="sequenceAttributes"/>
    </xsd:complexType>

    <xsd:complexType name="dropSequence">
        <xsd:attribute name="sequenceName" type="nonEmptyString" use="required"/>
        <xsd:attributeGroup ref="catalogAndSchemaName"/>
    </xsd:complexType>

    <xsd:complexType name="renameSequence">
        <xsd:attribute name="oldSequenceName" type="nonEmptyString"
                       use="required"/>
        <xsd:attribute name="newSequenceName" type="nonEmptyString"
                       use="required"/>
        <xsd:attributeGroup ref="catalogAndSchemaName"/>
    </xsd:complexType>

    <xsd:attributeGroup name="indexName">
        <xsd:attribute name="indexName" type="nonEmptyString" use="required"/>
    </xsd:attributeGroup>

    <xsd:complexType name="createIndex">
        <xsd:choice maxOccurs="unbounded">
            <xsd:element name="column" maxOccurs="unbounded" type="column"/>
            <xsd:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:choice>
        <xsd:attributeGroup ref="indexName"/>
        <xsd:attributeGroup ref="tableNameAttribute"/>
        <xsd:attribute name="associatedWith" type="xsd:string"/>
        <xsd:attribute name="unique" type="booleanExp"/>
        <xsd:attribute name="clustered" type="booleanExp"/>
        <xsd:attribute name="tablespace" type="xsd:string"/>
    </xsd:complexType>

    <xsd:complexType name="dropIndex">
        <xsd:attributeGroup ref="indexName"/>
        <xsd:attributeGroup ref="tableNameAttribute"/>
        <xsd:attribute name="associatedWith" type="xsd:string"/>
    </xsd:complexType>

    <xsd:complexType name="customChange">
        <xsd:sequence>
            <xsd:element name="param" minOccurs="0" maxOccurs="unbounded">
                <xsd:complexType mixed="true">
                    <xsd:attribute name="name" type="nonEmptyString" use="required"/>
                    <xsd:attribute name="value" type="xsd:string"/>
                </xsd:complexType>
            </xsd:element>
        </xsd:sequence>
        <xsd:attributeGroup ref="changeAttributes"/>
        <xsd:attribute name="class" type="nonEmptyString" use="required"/>
        <xsd:anyAttribute processContents="lax" />
    </xsd:complexType>

    <xsd:group name="ChangeSetChildren">
        <xsd:choice>
            <xsd:group ref="comment"/>
            <xsd:element name="createTable" type="createTable"/>
            <xsd:element name="dropTable" type="dropTable"/>
            <xsd:element name="createView" type="createView"/>
            <xsd:element name="renameView" type="renameView"/>
            <xsd:element name="dropView" type="dropView"/>
            <xsd:element name="insert" type="insert"/>
            <xsd:element name="addColumn" type="addColumn"/>
            <xsd:element name="sql" type="sql"/>
            <xsd:element name="createProcedure" type="createProcedure"/>
            <xsd:element name="dropProcedure" type="dropProcedure"/>
            <xsd:element name="sqlFile" type="sqlFile"/>
            <xsd:element name="renameTable" type="renameTable"/>
            <xsd:element name="renameColumn" type="renameColumn"/>
            <xsd:element name="dropColumn" type="dropColumn"/>
            <xsd:element name="mergeColumns" type="mergeColumns"/>
            <xsd:element name="modifyDataType" type="modifyDataType"/>
            <xsd:element name="createSequence" type="createSequence"/>
            <xsd:element name="alterSequence" type="alterSequence"/>
            <xsd:element name="dropSequence" type="dropSequence"/>
            <xsd:element name="renameSequence" type="renameSequence"/>
            <xsd:element name="createIndex" type="createIndex"/>
            <xsd:element name="dropIndex" type="dropIndex"/>
            <xsd:element name="addNotNullConstraint" type="addNotNullConstraint"/>
            <xsd:element name="dropNotNullConstraint" type="dropNotNullConstraint"/>
            <xsd:element name="addForeignKeyConstraint" type="addForeignKeyConstraint"/>
            <xsd:element name="dropForeignKeyConstraint" type="dropForeignKeyConstraint"/>
            <xsd:element name="dropAllForeignKeyConstraints" type="dropAllForeignKeyConstraints"/>
            <xsd:element name="addPrimaryKey" type="addPrimaryKey"/>
            <xsd:element name="dropPrimaryKey" type="dropPrimaryKey"/>
            <xsd:element name="addLookupTable" type="addLookupTable"/>
            <xsd:element name="addAutoIncrement" type="addAutoIncrement"/>
            <xsd:element name="addDefaultValue" type="addDefaultValue"/>
            <xsd:element name="dropDefaultValue" type="dropDefaultValue"/>
            <xsd:element name="addUniqueConstraint" type="addUniqueConstraint"/>
            <xsd:element name="dropUniqueConstraint" type="dropUniqueConstraint"/>
            <xsd:element name="setTableRemarks" type="setTableRemarks"/>
            <xsd:element name="setColumnRemarks" type="setColumnRemarks"/>
            <xsd:element name="customChange" type="customChange"/>
            <xsd:element name="update" type="update"/>
            <xsd:element name="delete" type="delete"/>
            <xsd:element name="loadData" type="loadData"/>
            <xsd:element name="loadUpdateData" type="loadUpdateData"/>
            <xsd:element name="executeCommand" type="executeCommand"/>
            <xsd:element name="stop" type="stop"/>
            <xsd:element name="output" type="output"/>
            <xsd:element name="empty" type="empty"/>
            <xsd:element name="rollback" type="rollback" maxOccurs="1"/>
            <xsd:any namespace="##other" processContents="lax" minOccurs="0"/>
        </xsd:choice>
    </xsd:group>

    <xsd:group name="PreConditionChildren">
        <xsd:choice>
            <xsd:element name="and" type="preconditionContainer">
                <xsd:annotation>
                    <xsd:documentation>AND logic</xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="or" type="preconditionContainer">
                <xsd:annotation>
                    <xsd:documentation>OR logic</xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="not" type="not"/>
            <xsd:element name="dbms" type="dbms"/>
            <xsd:element name="runningAs" type="runningAs"/>
            <xsd:element name="changeSetExecuted" type="changeSetExecuted"/>
            <xsd:element name="tableExists" type="tableExists" />
            <xsd:element name="columnExists" type="columnExists"/>
            <xsd:element name="sequenceExists" type="sequenceExists"/>
            <xsd:element name="foreignKeyConstraintExists" type="foreignKeyConstraintExists"/>
            <xsd:element name="indexExists" type="indexExists"/>
            <xsd:element name="uniqueConstraintExists" type="uniqueConstraintExists" maxOccurs="unbounded"/>
            <xsd:element name="primaryKeyExists" type="primaryKeyExists"/>
            <xsd:element name="viewExists" type="viewExists"/>
            <xsd:element name="tableIsEmpty" type="tableIsEmpty"/>
            <xsd:element name="rowCount" type="rowCount"/>
            <xsd:element name="sqlCheck" type="sqlCheck"/>
            <xsd:element name="changeLogPropertyDefined" type="changeLogPropertyDefined"/>
            <xsd:element name="expectedQuotingStrategy" type="expectedQuotingStrategy"/>
            <xsd:element name="customPrecondition" type="customPrecondition"/>
            <xsd:any namespace="##other" processContents="lax" minOccurs="0"/>
        </xsd:choice>
    </xsd:group>
</xsd:schema>
