<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            targetNamespace="http://www.liquibase.org/xml/ns/dbchangelog"
            xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
            elementFormDefault="qualified">

    <xsd:simpleType name="propertyExpression" id="propertyExpression">
        <xsd:restriction base="xsd:string">
            <xsd:pattern value="\$\{[\w\.\-\+_]+\}"/>
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:simpleType name="booleanExp" id="booleanExp">
        <xsd:annotation>
             <xsd:documentation>Extension to standard XSD boolean type to allow ${} parameters</xsd:documentation>
        </xsd:annotation>
        <xsd:union>
            <xsd:simpleType>
                <xsd:restriction base="xsd:boolean"/>
            </xsd:simpleType>
            <xsd:simpleType>
                <xsd:restriction base="propertyExpression"/>
            </xsd:simpleType>
        </xsd:union>
    </xsd:simpleType>

    <xsd:simpleType name="integerExp" id="integerExp">
        <xsd:annotation>
            <xsd:documentation>Extension to standard XSD integer type to allow ${} parameters</xsd:documentation>
        </xsd:annotation>
        <xsd:union>
            <xsd:simpleType>
                <xsd:restriction base="xsd:nonNegativeInteger"/>
            </xsd:simpleType>
            <xsd:simpleType>
                <xsd:restriction base="propertyExpression"/>
            </xsd:simpleType>
        </xsd:union>
    </xsd:simpleType>

    <xsd:simpleType name="onChangeSetPreconditionErrorOrFail">
        <xsd:restriction base="xsd:string">
            <xsd:enumeration value="HALT"/>
            <xsd:enumeration value="WARN"/>
            <xsd:enumeration value="CONTINUE"/>
            <xsd:enumeration value="MARK_RAN"/>
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:simpleType name="onChangeLogPreconditionErrorOrFail">
        <xsd:restriction base="xsd:string">
            <xsd:enumeration value="HALT"/>
            <xsd:enumeration value="WARN"/>
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:simpleType name="onChangeLogPreconditionOnSqlOutput">
        <xsd:restriction base="xsd:string">
            <xsd:enumeration value="TEST">
                <xsd:annotation>
                    <xsd:documentation>evaluate preconditions normally</xsd:documentation>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="FAIL">
                <xsd:annotation>
                    <xsd:documentation>fail any preconditions</xsd:documentation>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="IGNORE">
                <xsd:annotation>
                    <xsd:documentation>ignore any preconditions</xsd:documentation>
                </xsd:annotation>
            </xsd:enumeration>
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:simpleType name="onChangeSetValidationFail">
        <xsd:restriction base="xsd:string">
            <xsd:enumeration value="HALT"/>
            <xsd:enumeration value="MARK_RAN"/>
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:simpleType name="objectQuotingStrategy">
        <xsd:restriction base="xsd:string">
            <xsd:enumeration value="LEGACY"/>
            <xsd:enumeration value="QUOTE_ALL_OBJECTS"/>
            <xsd:enumeration value="QUOTE_ONLY_RESERVED_WORDS"/>
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:simpleType name="nonEmptyString">
        <xsd:restriction base="xsd:normalizedString">
            <xsd:pattern value="\S+"/>
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:simpleType name="propertyName">
        <xsd:annotation>
            <xsd:documentation>Name of the property
                Supported format includes alphanumeric characters, +, -, . , and _
            </xsd:documentation>
        </xsd:annotation>
        <xsd:restriction base="xsd:string">
            <xsd:pattern value="[\w\.\-\+_]+"/>
        </xsd:restriction>
    </xsd:simpleType>

    <!-- This is the main (root) part of the xsd -->
    <xsd:element name="databaseChangeLog">
        <xsd:annotation>
            <xsd:documentation>The root element of the changelog</xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="property" minOccurs="0" maxOccurs="unbounded">
                    <xsd:annotation>
                        <xsd:documentation>Define a property for substitution in your changelog.
                            The tokens to replace in your changelog are using the ${property-name} syntax.
                            For example, your tablespace name in Oracle may differ from environment to environment,
                            but you want to only write one create table changeset that can be used in all your environments.
                            See: https://docs.liquibase.com/concepts/changelogs/property-substitution.html</xsd:documentation>
                    </xsd:annotation>
                    <xsd:complexType>
                        <xsd:attribute name="file" type="xsd:string">
                            <xsd:annotation>
                                <xsd:documentation>The name of the file from which the properties should be loaded.
                                It will create a property for all properties in the file.
                                The content of the file must follow the Java properties file format.
                                </xsd:documentation>
                            </xsd:annotation>
                        </xsd:attribute>
                        <xsd:attribute name="name" type="propertyName">
                            <xsd:annotation>
                                <xsd:documentation>Name of the property. Required if the @file attribute is not set.
                                    Supported format includes alphanumeric characters, +, -, . , and _
                                </xsd:documentation>
                            </xsd:annotation>
                        </xsd:attribute>
                        <xsd:attribute name="value" type="xsd:string">
                            <xsd:annotation>
                                <xsd:documentation>The value of the property. Required if the @file attribute is not set</xsd:documentation>
                            </xsd:annotation>
                        </xsd:attribute>
                        <xsd:attributeGroup ref="dbms"/>
                        <xsd:attributeGroup ref="contextNlabels"/>
                        <xsd:attribute name="global" type="booleanExp">
                            <xsd:annotation>
                                <xsd:documentation>Define whether the property is global or limited to the actual databaseChangeLog. Default: true.
                                </xsd:documentation>
                            </xsd:annotation>
                        </xsd:attribute>
                        <xsd:attribute name="target" type="xsd:string"/>
                        <xsd:anyAttribute namespace="##other" processContents="lax"/>
                    </xsd:complexType>
                </xsd:element>

                <xsd:element name="preConditions" type="preConditions" minOccurs="0"/>

                <xsd:choice minOccurs="0" maxOccurs="unbounded">
                    <xsd:element name="changeSet" minOccurs="0" maxOccurs="unbounded">
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element name="validCheckSum" minOccurs="0"  maxOccurs="unbounded">
                                    <xsd:complexType mixed="true">
                                        <xsd:sequence>
                                            <xsd:element ref="comment" minOccurs="0" maxOccurs="1"/>
                                        </xsd:sequence>
                                    </xsd:complexType>
                                </xsd:element>
                                <xsd:element name="preConditions" type="preConditions" minOccurs="0"/>

                                <xsd:choice>
                                    <xsd:element name="tagDatabase" type="tagDatabase" maxOccurs="1"/>
                                    <xsd:group ref="changeSetChildren" minOccurs="0" maxOccurs="unbounded"/>
                                </xsd:choice>

                                <xsd:element name="modifySql" minOccurs="0" maxOccurs="unbounded">
                                    <xsd:complexType>
                                        <xsd:choice>
                                            <xsd:group ref="modifySqlChildren" minOccurs="1"
                                                       maxOccurs="unbounded"/>
                                        </xsd:choice>
                                        <xsd:attributeGroup ref="dbms"/>
                                        <xsd:attributeGroup ref="contextNlabels"/>
                                        <xsd:attribute name="applyToRollback" type="booleanExp"/>
                                    </xsd:complexType>
                                </xsd:element>

                            </xsd:sequence>
                            <xsd:attributeGroup ref="changeSetAttributes"/>
                            <xsd:anyAttribute namespace="##other" processContents="lax"/>
                        </xsd:complexType>
                    </xsd:element>

                    <!-- include -->
                    <xsd:element name="include" minOccurs="0" maxOccurs="unbounded">
                        <xsd:annotation>
                            <xsd:documentation>include the file defined by the @file attribute</xsd:documentation>
                        </xsd:annotation>
                        <xsd:complexType>
                            <xsd:attribute name="id" type="xsd:string"/>
                            <xsd:attribute name="author" type="xsd:string"/>
                            <xsd:attribute name="file" type="xsd:string" use="required"/>
                            <xsd:attributeGroup ref="relativeToChangelogFile"/>
                            <xsd:attributeGroup ref="contextNlabels"/>
                            <xsd:attribute name="ignore" type="booleanExp"/>
                            <xsd:attribute name="created" type="xsd:string"/>
                            <xsd:anyAttribute namespace="##other" processContents="lax"/>
                        </xsd:complexType>
                    </xsd:element>
                    <xsd:element name="includeAll" minOccurs="0" maxOccurs="unbounded">
                        <xsd:annotation>
                            <xsd:documentation>Include the files in the folder defined by the @path attribute</xsd:documentation>
                        </xsd:annotation>
                        <xsd:complexType>
                            <xsd:attribute name="path" type="xsd:string" use="required"/>
                            <xsd:attribute name="errorIfMissingOrEmpty" type="booleanExp" default="false"/>
                            <xsd:attributeGroup ref="relativeToChangelogPath"/>
                            <xsd:attribute name="resourceComparator" type="xsd:string"/>
                            <xsd:attribute name="filter" type="xsd:string"/>
                            <xsd:attributeGroup ref="contextNlabels"/>
                            <xsd:attribute name="ignore" type="booleanExp"/>
                            <xsd:anyAttribute namespace="##other" processContents="lax"/>
                        </xsd:complexType>
                    </xsd:element>
                </xsd:choice>
            </xsd:sequence>
            <xsd:attributeGroup ref="changeLogAttributes"/>
            <xsd:anyAttribute namespace="##other" processContents="lax"/>
        </xsd:complexType>
    </xsd:element>

    <xsd:complexType name="preConditions">
        <xsd:annotation>
            <xsd:documentation>Preconditions required to execute the changelog.
                If global, must be passed before the changeset is run.
                If no conditional tags are specified, the default logic is AND for multiple conditions</xsd:documentation>
        </xsd:annotation>
        <xsd:group ref="PreConditionChildren" maxOccurs="unbounded"/>
        <xsd:attribute name="onFailMessage" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>Provides a custom message to output when preconditions fail</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>

        <xsd:attribute name="onErrorMessage" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>Provides a custom message to output if there is an error while checking the preconditions</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="onFail"
                       type="onChangeLogPreconditionErrorOrFail">
            <xsd:annotation>
                <xsd:documentation>Controls what happens if the preconditions check fails</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="onError"
                       type="onChangeLogPreconditionErrorOrFail">
            <xsd:annotation>
                <xsd:documentation>Controls what happens if there is an error while checking the preconditions</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="onSqlOutput"
                       type="onChangeLogPreconditionOnSqlOutput">
            <xsd:annotation>
                <xsd:documentation>Controls how preconditions are evaluated with the update-sql command TEST: Run
                    precondition, FAIL: Fail precondition, IGNORE: Skip precondition check
                    [DEFAULT]
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:complexType>

    <xsd:attributeGroup name="context">
        <xsd:attribute name="context" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>The filter defining which contexts require the entity to take into consideration.
                    It can be a logical expression like:
                    If empty it is involved in the operation regardless the contexts requested
                    See: https://docs.liquibase.com/concepts/changelogs/attributes/contexts.html</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:attributeGroup>

    <xsd:attributeGroup name="contextNlabels">
        <xsd:attributeGroup ref="context"/>
        <xsd:attributeGroup ref="labels"/>
    </xsd:attributeGroup>

    <xsd:attributeGroup name="labels">
        <xsd:attribute name="labels" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>The filter defining which labels require the entity to take into consideration.
                    If empty it is involved in the operation regardless the labels requested
                    See: https://docs.liquibase.com/concepts/changelogs/attributes/labels.html</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:attributeGroup>

    <xsd:group name="modifySqlChildren">
        <xsd:choice>
            <xsd:element name="replace" minOccurs="0" maxOccurs="unbounded">
                <xsd:complexType>
                    <xsd:attribute name="replace" type="xsd:string" use="required"/>
                    <xsd:attribute name="with" type="xsd:string" use="required"/>
                </xsd:complexType>
            </xsd:element>
            <xsd:element name="regExpReplace" minOccurs="0"
                         maxOccurs="unbounded">
                <xsd:complexType>
                    <xsd:attribute name="replace" type="xsd:string" use="required"/>
                    <xsd:attribute name="with" type="xsd:string" use="required"/>
                </xsd:complexType>
            </xsd:element>
            <xsd:element name="prepend" minOccurs="0" maxOccurs="unbounded">
                <xsd:complexType>
                    <xsd:attribute name="value" type="xsd:string" use="required"/>
                </xsd:complexType>
            </xsd:element>
            <xsd:element name="append" minOccurs="0" maxOccurs="unbounded">
                <xsd:complexType>
                    <xsd:attribute name="value" type="xsd:string" use="required"/>
                </xsd:complexType>
            </xsd:element>
        </xsd:choice>
    </xsd:group>

    <!-- Attributes for DatabaseInfo -->
    <xsd:attributeGroup name="DatabaseInfoAttributes">
        <xsd:attribute name="type" type="xsd:string"/>
        <xsd:attribute name="version" type="xsd:string"/>
        <xsd:attribute name="username" type="xsd:string"/>
        <xsd:attribute name="password" type="xsd:string"/>
        <xsd:attribute name="port" type="integerExp"/>
        <xsd:attribute name="host" type="xsd:string"/>
        <xsd:attribute name="schemaName" type="xsd:string"/>
        <xsd:attribute name="driverName" type="xsd:string"/>
    </xsd:attributeGroup>

    <xsd:attributeGroup name="changeLogAttributes">
        <xsd:attribute name="logicalFilePath" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>Overrides the file name and path when creating the unique identifier of changesets.
                    It is required when you want to move or rename changelogs. Highly recommended to use.</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attributeGroup ref="context"/>
        <xsd:attribute name="objectQuotingStrategy" type="objectQuotingStrategy" default="LEGACY"/>
    </xsd:attributeGroup>

    <!-- Attributes for changeSet -->
    <xsd:attributeGroup name="changeSetAttributes">
        <xsd:attribute name="id" type="xsd:string" use="required">
            <xsd:annotation>
                <xsd:documentation>The 2nd part of the changeset's unique id</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>

        <xsd:attribute name="author" type="xsd:string" use="required">
            <xsd:annotation>
                <xsd:documentation>The author of the changeset: the 3rd part of the changeset's unique id</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attributeGroup ref="labels"/>
        <xsd:attributeGroup ref="dbms"/>
        <xsd:attributeGroup ref="changeLogAttributes"/>
        <xsd:attribute name="runOnChange" type="booleanExp"/>
        <xsd:attribute name="runAlways" type="booleanExp"/>
        <xsd:attribute name="failOnError" type="booleanExp"/>
        <xsd:attribute name="onValidationFail" type="onChangeSetValidationFail"/>
        <xsd:attribute name="runInTransaction" type="booleanExp" default="true"/>
        <xsd:attribute name="created" type="xsd:string"/>
        <xsd:attribute name="runOrder" type="xsd:string"/>
        <xsd:attribute name="ignore" type="booleanExp"/>
        <xsd:attribute name="runWith" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation source="https://docs.liquibase.com/concepts/changelogs/attributes/runwith.html">
                    When the JDBC connection (or executor used by default) cannot process highly specialized SQL,
                    this attribute allows to specify a non-default executor to run SQL defined in &lt;sql&gt; or &lt;sqlFile&gt; changes.
                    See: https://docs.liquibase.com/concepts/changelogs/attributes/runwith.html
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:attributeGroup>

    <!-- Attributes for changes -->
    <xsd:attributeGroup name="changeAttributes">
        <xsd:anyAttribute namespace="##any" processContents="lax"/>
    </xsd:attributeGroup>

    <xsd:attributeGroup name="column">
        <xsd:attribute name="name" type="xsd:string"/>
        <xsd:attribute name="computed" type="booleanExp"/>
        <xsd:attribute name="descending" type="booleanExp"/>
        <xsd:attribute name="type" type="xsd:string"/>
        <xsd:attribute name="value" type="xsd:string"/>
        <xsd:attribute name="valueNumeric" type="xsd:string"/>
        <xsd:attribute name="valueBoolean" type="xsd:string"/>
        <xsd:attribute name="valueDate" type="xsd:string"/>
        <xsd:attribute name="valueComputed" type="xsd:string"/>
        <xsd:attribute name="valueSequenceCurrent" type="xsd:string"/>
        <xsd:attribute name="valueSequenceNext" type="xsd:string"/>
        <xsd:attribute name="valueBlobFile" type="xsd:string"/>
        <xsd:attribute name="valueClobFile" type="xsd:string"/>
        <xsd:attribute name="defaultValue" type="xsd:string"/>
        <xsd:attribute name="defaultValueNumeric" type="xsd:string"/>
        <xsd:attribute name="defaultValueDate" type="xsd:string"/>
        <xsd:attribute name="defaultValueBoolean" type="booleanExp"/>
        <xsd:attribute name="defaultValueComputed" type="xsd:string"/>
        <xsd:attribute name="defaultValueSequenceCurrent" type="xsd:string"/>
        <xsd:attribute name="defaultValueSequenceNext" type="xsd:string"/>
        <xsd:attribute name="defaultValueConstraintName" type="xsd:string"/>
        <xsd:attribute name="autoIncrement" type="booleanExp"/>
        <xsd:attribute name="startWith" type="xsd:long"/>
        <xsd:attribute name="incrementBy" type="xsd:long"/>
        <xsd:attribute name="generationType" type="xsd:string"/>
        <xsd:attribute name="defaultOnNull" type="booleanExp"/>
        <xsd:attribute name="remarks" type="xsd:string"/>
        <xsd:attribute name="encoding" type="xsd:string">
            <xsd:annotation>
                <xsd:appinfo>
                    <xsd:documentation>
                        Used with valueClobFile to specify file encoding explicitly.
                    </xsd:documentation>
                </xsd:appinfo>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute namespace="##other" processContents="lax"/>
    </xsd:attributeGroup>

    <xsd:complexType name="columnType" mixed="true">
        <xsd:sequence>
            <xsd:element name="constraints" type="constraints" minOccurs="0"/>
            <xsd:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:sequence>
        <xsd:attributeGroup ref="column"/>
        <xsd:anyAttribute namespace="##other" processContents="lax"/>
    </xsd:complexType>

    <!-- catalog and schemaName -->
    <xsd:attributeGroup name="catalogNschemaName">
        <xsd:attribute name="catalogName" type="xsd:string"/>
        <xsd:attribute name="schemaName" type="xsd:string"/>
    </xsd:attributeGroup>

    <!-- catalog, schema and required tableName -->
    <xsd:attributeGroup name="tableNameAttributes">
        <xsd:attributeGroup ref="catalogNschemaName"/>
        <xsd:attribute name="tableName" type="nonEmptyString" use="required"/>
    </xsd:attributeGroup>

    <!-- catalog, schema, required tableName and columnName -->
    <xsd:attributeGroup name="columnNameAttributes">
        <xsd:attributeGroup ref="tableNameAttributes"/>
        <xsd:attribute name="columnName" type="nonEmptyString" use="required"/>
    </xsd:attributeGroup>

    <xsd:attributeGroup name="sequenceAttributes">
        <xsd:attributeGroup ref="changeAttributes"/>
        <xsd:attributeGroup ref="catalogNschemaName"/>
        <xsd:attribute name="sequenceName" type="nonEmptyString"
                       use="required"/>
        <xsd:attribute name="startValue" type="xsd:string"/>
        <xsd:attribute name="incrementBy" type="xsd:string"/>
        <xsd:attribute name="maxValue" type="xsd:string"/>
        <xsd:attribute name="minValue" type="xsd:string"/>
        <xsd:attribute name="ordered" type="xsd:string"/>
        <xsd:attribute name="cacheSize" type="xsd:string"/>
        <xsd:attribute name="dataType" type="xsd:string" />
        <xsd:attribute name="cycle" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>
                    true for a cycling sequence, false for a non-cycling sequence.
                    Default is false.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:attributeGroup>

    <xsd:complexType name="addPrimaryKey">
        <xsd:choice maxOccurs="unbounded">
            <xsd:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:choice>
        <xsd:attributeGroup ref="changeAttributes"/>
        <xsd:attributeGroup ref="tableNameAttributes"/>
        <xsd:attribute name="columnNames" type="nonEmptyString"
                       use="required"/>
        <xsd:attribute name="constraintName" type="nonEmptyString"/>
        <xsd:attribute name="tablespace" type="xsd:string"/>
        <xsd:attribute name="clustered" type="booleanExp"/>
        <xsd:attribute name="forIndexCatalogName" type="xsd:string"/>
        <xsd:attribute name="forIndexSchemaName" type="xsd:string"/>
        <xsd:attribute name="forIndexName" type="xsd:string"/>
        <xsd:attribute name="validate" type="booleanExp"/>
        <xsd:anyAttribute namespace="##other" processContents="lax"/>
    </xsd:complexType>

    <xsd:complexType name="dropPrimaryKey">
        <xsd:attributeGroup ref="changeAttributes"/>
        <xsd:attributeGroup ref="tableNameAttributes"/>
        <xsd:attribute name="constraintName" type="xsd:string"/>
    </xsd:complexType>

    <xsd:complexType name="addUniqueConstraint">
        <xsd:choice maxOccurs="unbounded">
            <xsd:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded" />
        </xsd:choice>
        <xsd:attributeGroup ref="changeAttributes"/>
        <xsd:attributeGroup ref="tableNameAttributes"/>
        <xsd:attribute name="columnNames" type="nonEmptyString" use="required"/>
        <xsd:attribute name="constraintName" type="xsd:string"/>
        <xsd:attribute name="tablespace" type="xsd:string"/>
        <xsd:attribute name="disabled" type="booleanExp"/>
        <xsd:attribute name="deferrable" type="booleanExp"/>
        <xsd:attribute name="initiallyDeferred" type="booleanExp"/>
        <xsd:attribute name="forIndexCatalogName" type="xsd:string"/>
        <xsd:attribute name="forIndexSchemaName" type="xsd:string"/>
        <xsd:attribute name="forIndexName" type="xsd:string"/>
        <xsd:attribute name="clustered" type="booleanExp"/>
        <xsd:attribute name="validate" type="booleanExp"/>
        <xsd:anyAttribute namespace="##other" processContents="lax"/>
    </xsd:complexType>

    <xsd:complexType name="dropUniqueConstraint">
        <xsd:attributeGroup ref="changeAttributes"/>
        <xsd:attributeGroup ref="tableNameAttributes"/>
        <xsd:attribute name="constraintName" type="xsd:string"/>
        <xsd:attribute name="uniqueColumns" type="xsd:string"/>
    </xsd:complexType>

    <xsd:complexType name="modifyDataType">
        <xsd:attributeGroup ref="changeAttributes"/>
        <xsd:attributeGroup ref="columnNameAttributes"/>
        <xsd:attribute name="newDataType" type="nonEmptyString" use="required"/>
    </xsd:complexType>

    <xsd:complexType name="addLookupTable">
        <xsd:attributeGroup ref="changeAttributes"/>
        <xsd:attribute name="existingTableCatalogName" type="xsd:string"/>
        <xsd:attribute name="existingTableSchemaName" type="xsd:string"/>
        <xsd:attribute name="existingTableName" type="xsd:string"
                       use="required"/>
        <xsd:attribute name="existingColumnName" type="xsd:string"
                       use="required"/>
        <xsd:attribute name="newTableCatalogName" type="xsd:string"/>
        <xsd:attribute name="newTableSchemaName" type="xsd:string"/>
        <xsd:attribute name="newTableName" type="xsd:string"
                       use="required"/>
        <xsd:attribute name="newColumnName" type="xsd:string"
                       use="required"/>
        <xsd:attribute name="newColumnDataType" type="xsd:string"/>
        <xsd:attribute name="constraintName" type="xsd:string"/>
    </xsd:complexType>

    <xsd:complexType name="addAutoIncrement">
        <xsd:attributeGroup ref="changeAttributes"/>
        <xsd:attributeGroup ref="columnNameAttributes"/>
        <xsd:attribute name="columnDataType" type="xsd:string"/>
        <xsd:attribute name="startWith" type="xsd:long"/>
        <xsd:attribute name="incrementBy" type="xsd:long"/>
    </xsd:complexType>

    <xsd:complexType name="addDefaultValue">
        <xsd:attributeGroup ref="changeAttributes"/>
        <xsd:attributeGroup ref="columnNameAttributes"/>
        <xsd:attribute name="columnDataType" type="xsd:string"/>
        <xsd:attribute name="defaultValue" type="xsd:string"/>
        <xsd:attribute name="defaultValueNumeric" type="xsd:string"/>
        <xsd:attribute name="defaultValueDate" type="xsd:string"/>
        <xsd:attribute name="defaultValueBoolean" type="xsd:string"/>
        <xsd:attribute name="defaultValueComputed" type="xsd:string"/>
        <xsd:attribute name="defaultValueSequenceNext" type="xsd:string"/>
        <xsd:attribute name="defaultValueConstraintName" type="xsd:string"/>
    </xsd:complexType>

    <xsd:complexType name="dropDefaultValue">
        <xsd:attributeGroup ref="changeAttributes"/>
        <xsd:attributeGroup ref="columnNameAttributes"/>
        <xsd:attribute name="columnDataType" type="xsd:string"/>
    </xsd:complexType>

    <xsd:attributeGroup name="loadDataAttributes">
        <xsd:attribute name="file" type="xsd:string"/>
        <xsd:attributeGroup ref="relativeToChangelogFile"/>
        <xsd:attribute name="encoding" type="xsd:string" default="UTF-8"/>
        <xsd:attribute name="separator" type="xsd:string" default=","/>
        <xsd:attribute name="quotchar" type="xsd:string" default="&quot;"/>
        <xsd:attribute name="commentLineStartsWith" type="xsd:string" default="#"/>
    </xsd:attributeGroup>

    <xsd:complexType name="loadDataColumn">
        <xsd:attribute name="index" type="integerExp"/>
        <xsd:attribute name="header" type="xsd:string"/>
        <xsd:attribute name="name" type="xsd:string"/>
        <xsd:attribute name="type" type="xsd:string"/>
        <xsd:attribute name="defaultValue" type="xsd:string"/>
        <xsd:attribute name="defaultValueNumeric" type="xsd:string"/>
        <xsd:attribute name="defaultValueDate" type="xsd:string"/>
        <xsd:attribute name="defaultValueBoolean" type="booleanExp"/>
        <xsd:attribute name="defaultValueComputed" type="xsd:string"/>
    </xsd:complexType>

    <xsd:complexType mixed="true" name="loadData">
        <xsd:sequence>
            <xsd:element name="column" type="loadDataColumn" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:sequence>
        <xsd:attributeGroup ref="changeAttributes"/>
        <xsd:attributeGroup ref="tableNameAttributes"/>
        <xsd:attributeGroup ref="loadDataAttributes"/>
        <xsd:attribute name="usePreparedStatements" type="booleanExp"/>
    </xsd:complexType>

    <xsd:complexType mixed="true" name="loadUpdateData">
        <xsd:sequence>
            <xsd:element name="column" type="loadDataColumn" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:sequence>
        <xsd:attributeGroup ref="tableNameAttributes"/>
        <xsd:attributeGroup ref="loadDataAttributes"/>
        <xsd:attribute name="primaryKey" type="nonEmptyString" use="required"/>
        <xsd:attribute name="onlyUpdate" type="booleanExp" default="false"/>
    </xsd:complexType>

    <xsd:simpleType name="fkCascadeActionOptions">
        <xsd:restriction base="xsd:token">
            <xsd:enumeration value="CASCADE"/>
            <xsd:enumeration value="SET NULL"/>
            <xsd:enumeration value="SET DEFAULT"/>
            <xsd:enumeration value="RESTRICT"/>
            <xsd:enumeration value="NO ACTION"/>
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:complexType name="addNotNullConstraint">
        <xsd:attributeGroup ref="changeAttributes"/>
        <xsd:attributeGroup ref="columnNameAttributes"/>
        <xsd:attribute name="defaultNullValue" type="xsd:string"/>
        <xsd:attribute name="columnDataType" type="xsd:string"/>
        <xsd:attribute name="constraintName" type="xsd:string"/>
        <xsd:attribute name="validate" type="booleanExp"/>
    </xsd:complexType>

    <xsd:complexType name="addForeignKeyConstraint">
        <xsd:attributeGroup ref="changeAttributes"/>
        <xsd:attributeGroup ref="baseTableNameAttributes"/>
        <xsd:attribute name="baseColumnNames" type="xsd:string"
                       use="required"/>
        <xsd:attribute name="constraintName" type="xsd:string"
                       use="required"/>
        <xsd:attribute name="referencedTableCatalogName" type="xsd:string"/>
        <xsd:attribute name="referencedTableSchemaName" type="xsd:string"/>
        <xsd:attribute name="referencedTableName" type="xsd:string"
                       use="required"/>
        <xsd:attribute name="referencedColumnNames" type="xsd:string"
                       use="required"/>
        <xsd:attribute name="deferrable" type="booleanExp"/>
        <xsd:attribute name="initiallyDeferred" type="booleanExp"/>
        <xsd:attribute name="deleteCascade" type="booleanExp"/>
        <xsd:attribute name="onDelete" type="fkCascadeActionOptions"/>
        <xsd:attribute name="onUpdate" type="fkCascadeActionOptions"/>
        <xsd:attribute name="referencesUniqueColumn" type="booleanExp"/>
        <xsd:attribute name="validate" type="booleanExp"/>
    </xsd:complexType>

    <xsd:complexType name="dbms">
        <xsd:annotation>
            <xsd:documentation>Check if the database the changelog executed on matches to @type</xsd:documentation>
        </xsd:annotation>
        <xsd:attribute name="type" type="xsd:string" use="required">
            <xsd:annotation>
                <xsd:documentation>Expected database type</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:complexType>

    <xsd:complexType name="changeSetExecuted">
        <xsd:annotation>
            <xsd:documentation>Check if the changeset identified by @changeLogFile :: @id :: @author
                has already been executed in a previous deployment</xsd:documentation>
        </xsd:annotation>
        <xsd:attribute name="id" type="xsd:string" use="required"/>
        <xsd:attribute name="author" type="xsd:string" use="required"/>
        <xsd:attribute name="changeLogFile" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>File name of the changelog. If not set the actual (logical) file name is used</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:complexType>

    <xsd:complexType name="tableExists">
        <xsd:annotation>
            <xsd:documentation>Checks if table with @tableName exists in the database</xsd:documentation>
        </xsd:annotation>
        <xsd:attributeGroup ref="tableNameAttributes"/>
        </xsd:complexType>

    <xsd:complexType name="columnExists">
        <xsd:annotation>
            <xsd:documentation>Check if column @columnName exists in the table @tableName </xsd:documentation>
        </xsd:annotation>
        <xsd:attributeGroup ref="columnNameAttributes"/>
    </xsd:complexType>

    <xsd:complexType name="sequenceExists">
        <xsd:attributeGroup ref="catalogNschemaName"/>
        <xsd:attribute name="sequenceName" type="nonEmptyString" use="required"/>
    </xsd:complexType>

    <xsd:complexType name="foreignKeyConstraintExists">
        <xsd:attributeGroup ref="catalogNschemaName"/>
        <xsd:attribute name="foreignKeyTableName" type="xsd:string"/>
        <xsd:attribute name="foreignKeyName" type="nonEmptyString" use="required"/>
    </xsd:complexType>

    <xsd:complexType name="indexExists">
        <xsd:annotation>
            <xsd:documentation>Check if the index referenced bythe @indexName or @tableName and @columnNames
                @indexName or @tableName and @columnNames required</xsd:documentation>
        </xsd:annotation>
        <xsd:attributeGroup ref="catalogNschemaName"/>
        <xsd:attribute name="indexName" type="nonEmptyString"/>
        <xsd:attribute name="tableName" type="nonEmptyString"/>
        <xsd:attribute name="columnNames" type="nonEmptyString"/>
    </xsd:complexType>

    <xsd:complexType name="rowCount">
        <xsd:attributeGroup ref="tableNameAttributes"/>
        <xsd:attribute name="expectedRows" type="integerExp"/>
    </xsd:complexType>

    <xsd:complexType name="tableIsEmpty">
        <xsd:attributeGroup ref="tableNameAttributes"/>
    </xsd:complexType>

    <xsd:complexType name="changeLogPropertyDefined">
        <xsd:annotation>
            <xsd:documentation>Check if the changeLog property with the name in @property is set to @value.
                    If @value is not defined checks only if the property is defined at all</xsd:documentation>
        </xsd:annotation>
        <xsd:attribute name="property" type="propertyName" use="required"/>
        <xsd:attribute name="value" type="xsd:string"/>
    </xsd:complexType>

    <xsd:complexType name="primaryKeyExists">
        <xsd:attributeGroup ref="catalogNschemaName"/>
        <xsd:attribute name="primaryKeyName" type="xsd:string"/>
        <xsd:attribute name="tableName" type="xsd:string"/>
    </xsd:complexType>

    <xsd:complexType name="viewExists">
        <xsd:attributeGroup ref="catalogNschemaName"/>
        <xsd:attribute name="viewName" type="nonEmptyString" use="required"/>
    </xsd:complexType>

    <xsd:complexType mixed="true" name="sqlCheck">
        <xsd:annotation>
            <xsd:documentation>Executes the SQL statement in the content and checks the returned value
                matches the value defined in @expectedResult
                The SQL must return a single row with a single value.</xsd:documentation>
        </xsd:annotation>
        <xsd:attribute name="expectedResult" type="xsd:string" use="required"/>
    </xsd:complexType>

    <xsd:complexType name="customPrecondition">
        <xsd:sequence>
            <xsd:element name="param" minOccurs="0" maxOccurs="unbounded">
                <xsd:complexType>
                    <xsd:attribute name="name" type="nonEmptyString" use="required"/>
                    <xsd:attribute name="value" type="xsd:string" use="required"/>
                </xsd:complexType>
            </xsd:element>
        </xsd:sequence>
        <xsd:attribute name="className" type="nonEmptyString" use="required"/>
    </xsd:complexType>

    <xsd:complexType name="conditionalLogic">
        <xsd:group ref="PreConditionChildren" minOccurs="2" maxOccurs="unbounded"/>
    </xsd:complexType>

    <xsd:complexType name="not">
        <xsd:annotation>
            <xsd:documentation>Logical NOT operator. For multiple children AND logic is used</xsd:documentation>
        </xsd:annotation>
        <xsd:group ref="PreConditionChildren" minOccurs="1" maxOccurs="unbounded"/>
    </xsd:complexType>

    <xsd:complexType name="runningAs">
        <xsd:annotation>
            <xsd:documentation>Check if the name of the database user executing the change log matches the @username</xsd:documentation>
        </xsd:annotation>
        <xsd:attribute name="username" type="xsd:string" use="required">
            <xsd:annotation>
                <xsd:documentation>The name of the database user expected executing the change log</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:complexType>

    <xsd:complexType name="expectedQuotingStrategy">
        <xsd:annotation>
            <xsd:documentation>Precondition that checks if objectQuotingStrategy set for the changelog matches to @strategy</xsd:documentation>
        </xsd:annotation>
        <xsd:attribute name="strategy" type="objectQuotingStrategy" use="required">
            <xsd:annotation>
                <xsd:documentation>objectQuotingStrategy expected to be set for the changelog</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        </xsd:complexType>

    <xsd:attributeGroup name="baseTableNameAttributes">
        <xsd:attribute name="baseTableCatalogName" type="xsd:string"/>
        <xsd:attribute name="baseTableSchemaName" type="xsd:string"/>
        <xsd:attribute name="baseTableName" type="nonEmptyString"
                       use="required"/>
    </xsd:attributeGroup>

    <xsd:complexType name="dropForeignKeyConstraint">
        <xsd:attributeGroup ref="changeAttributes"/>
        <xsd:attributeGroup ref="baseTableNameAttributes"/>
        <xsd:attribute name="constraintName" type="xsd:string"/>
    </xsd:complexType>

    <xsd:complexType name="dropAllForeignKeyConstraints">
        <xsd:attributeGroup ref="changeAttributes"/>
        <xsd:attributeGroup ref="baseTableNameAttributes"/>
    </xsd:complexType>

    <xsd:complexType name="dropNotNullConstraint">
        <xsd:attributeGroup ref="changeAttributes"/>
        <xsd:attributeGroup ref="columnNameAttributes"/>
        <xsd:attribute name="columnDataType" type="xsd:string"/>
    </xsd:complexType>

    <xsd:complexType name="setTableRemarks">
        <xsd:attributeGroup ref="tableNameAttributes"/>
        <xsd:attribute name="remarks" type="xsd:string" use="required"/>
    </xsd:complexType>

    <xsd:complexType name="setColumnRemarks">
        <xsd:attributeGroup ref="columnNameAttributes"/>
        <xsd:attribute name="remarks" type="xsd:string" use="required"/>
    </xsd:complexType>

    <xsd:complexType name="constraints">
        <xsd:attribute name="nullable" type="booleanExp"/>
        <xsd:attribute name="notNullConstraintName" type="xsd:string"/>
        <xsd:attribute name="primaryKey" type="booleanExp"/>
        <xsd:attribute name="primaryKeyName" type="xsd:string"/>
        <xsd:attribute name="primaryKeyTablespace" type="xsd:string"/>
        <xsd:attribute name="unique" type="booleanExp"/>
        <xsd:attribute name="uniqueConstraintName" type="xsd:string"/>
        <xsd:attribute name="references" type="xsd:string"/>
        <xsd:attribute name="referencedTableCatalogName" type="xsd:string"/>
        <xsd:attribute name="referencedTableSchemaName" type="xsd:string"/>
        <xsd:attribute name="referencedTableName" type="xsd:string"/>
        <xsd:attribute name="referencedColumnNames" type="xsd:string"/>
        <xsd:attribute name="foreignKeyName" type="xsd:string"/>
        <xsd:attribute name="deleteCascade" type="booleanExp"/>
        <xsd:attribute name="deferrable" type="booleanExp"/>
        <xsd:attribute name="initiallyDeferred" type="booleanExp"/>
        <xsd:attribute name="checkConstraint" type="xsd:string"/>
        <xsd:attribute name="validateNullable" type="booleanExp"/>
        <xsd:attribute name="validateUnique" type="booleanExp"/>
        <xsd:attribute name="validatePrimaryKey" type="booleanExp"/>
        <xsd:attribute name="validateForeignKey" type="booleanExp"/>
    </xsd:complexType>

    <xsd:complexType name="createTable">
        <xsd:choice maxOccurs="unbounded">
            <xsd:element name="column" type="columnType" minOccurs="1" maxOccurs="unbounded"/>
            <xsd:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:choice>
        <xsd:attributeGroup ref="changeAttributes"/>
        <xsd:attributeGroup ref="tableNameAttributes"/>
        <xsd:attribute name="tablespace" type="xsd:string"/>
        <xsd:attribute name="remarks" type="xsd:string"/>
        <xsd:anyAttribute namespace="##other" processContents="lax"/>
    </xsd:complexType>

    <xsd:complexType name="createView">
        <xsd:simpleContent>
            <xsd:extension base="xsd:string">
                <xsd:attributeGroup ref="changeAttributes"/>
                <xsd:attributeGroup ref="catalogNschemaName"/>
                <xsd:attribute name="viewName" type="nonEmptyString" use="required"/>
                <xsd:attribute name="remarks" type="xsd:string"/>
                <xsd:attribute name="replaceIfExists" type="booleanExp"/>
                <xsd:attribute name="fullDefinition" type="booleanExp"/>
                <xsd:attribute name="path" type="nonEmptyString"/>
                <xsd:attribute name="encoding" type="xsd:string"/>
                <xsd:attributeGroup ref="relativeToChangelogPath"/>
                <xsd:anyAttribute namespace="##other" processContents="lax"/>
            </xsd:extension>
        </xsd:simpleContent>
    </xsd:complexType>

    <xsd:complexType name="insert">
        <xsd:sequence>
            <xsd:element name="column" type="columnType" maxOccurs="unbounded"/>
        </xsd:sequence>
        <xsd:attributeGroup ref="changeAttributes"/>
        <xsd:attributeGroup ref="tableNameAttributes"/>
        <xsd:attributeGroup ref="dbms"/>
    </xsd:complexType>

    <xsd:complexType mixed="true" name="update">
        <xsd:sequence>
            <xsd:element name="column" type="columnType" minOccurs="1" maxOccurs="unbounded"/>
            <xsd:element name="where" minOccurs="0" maxOccurs="1" type="xsd:string"/>
            <xsd:element name="whereParams" type="whereParams" minOccurs="0" maxOccurs="1"/>
        </xsd:sequence>
        <xsd:attributeGroup ref="changeAttributes"/>
        <xsd:attributeGroup ref="tableNameAttributes"/>
    </xsd:complexType>

    <xsd:complexType mixed="true" name="whereParams">
        <xsd:sequence>
            <xsd:element name="param" type="param" minOccurs="1" maxOccurs="unbounded"/>
        </xsd:sequence>
    </xsd:complexType>

    <xsd:complexType name="param">
        <xsd:attribute name="name" type="xsd:string"/>
        <xsd:attribute name="value" type="xsd:string"/>
        <xsd:attribute name="valueNumeric" type="xsd:string"/>
        <xsd:attribute name="valueBoolean" type="xsd:string"/>
        <xsd:attribute name="valueDate" type="xsd:string"/>
        <xsd:attribute name="valueComputed" type="xsd:string"/>
        <xsd:attribute name="valueSequenceNext" type="xsd:string"/>
        <xsd:attribute name="valueSequenceCurrent" type="xsd:string"/>
    </xsd:complexType>

    <xsd:complexType mixed="true" name="delete">
        <xsd:sequence>
            <xsd:element name="where" minOccurs="0" maxOccurs="1"/>
            <xsd:element name="whereParams" type="whereParams" minOccurs="0" maxOccurs="1"/>
        </xsd:sequence>
        <xsd:attributeGroup ref="tableNameAttributes"/>
    </xsd:complexType>

    <xsd:complexType name="addColumn">
        <xsd:sequence>
            <xsd:element name="column" minOccurs="1" maxOccurs="unbounded">
                <xsd:complexType>
                    <xsd:complexContent mixed="true">
                        <xsd:extension base="columnType">
                            <xsd:attribute name="beforeColumn" type="xsd:string"/>
                            <xsd:attribute name="afterColumn" type="xsd:string"/>
                            <xsd:attribute name="position" type="integerExp"/>
                        </xsd:extension>
                    </xsd:complexContent>
                </xsd:complexType>
            </xsd:element>
        </xsd:sequence>
        <xsd:attributeGroup ref="changeAttributes"/>
        <xsd:attributeGroup ref="tableNameAttributes"/>
    </xsd:complexType>

    <xsd:complexType mixed="true" name="rollback">
        <xsd:choice>
            <xsd:group ref="changeSetChildren" minOccurs="0"
                       maxOccurs="unbounded"/>
        </xsd:choice>
        <xsd:attribute name="changeSetPath" type="xsd:string"/>
        <xsd:attribute name="changeSetAuthor" type="xsd:string"/>
        <xsd:attribute name="changeSetId" type="xsd:string"/>
    </xsd:complexType>

    <!-- comment  -->
    <xsd:element name="comment" type="xsd:string"/>

    <xsd:complexType mixed="true" name="sql">
        <xsd:annotation>
            <xsd:documentation>Execute any SQL statement(s) in the content.
                The SQL change can also contain comments of either of the following formats:
                A multi-line comment that starts with /* and ends with */.
                A single line comment starting with -- and finishing at the end of the line.
                or a comment element can be used
            </xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element ref="comment" minOccurs="0" maxOccurs="1"/>
        </xsd:sequence>
        <xsd:attributeGroup ref="changeAttributes"/>
        <xsd:attributeGroup ref="sqlAttributes"/>
    </xsd:complexType>

    <xsd:complexType mixed="true" name="createProcedure">
        <xsd:sequence>
            <xsd:element ref="comment" minOccurs="0" maxOccurs="1"/>
        </xsd:sequence>
        <xsd:attributeGroup ref="changeAttributes"/>
        <xsd:attributeGroup ref="catalogNschemaName"/>
        <xsd:attribute name="procedureName" type="nonEmptyString"/>
        <xsd:attribute name="path" type="nonEmptyString"/>
        <xsd:attribute name="encoding" type="xsd:string"/>
        <xsd:attributeGroup ref="relativeToChangelogPath"/>
        <xsd:attributeGroup ref="dbms"/>
        <xsd:attribute name="replaceIfExists" type="booleanExp"/>
    </xsd:complexType>

    <xsd:complexType name="executeCommand">
        <xsd:sequence>
            <xsd:element name="arg" minOccurs="0" maxOccurs="unbounded">
                <xsd:complexType>
                    <xsd:attribute name="value" type="xsd:string" use="required"/>
                </xsd:complexType>
            </xsd:element>
        </xsd:sequence>
        <xsd:attributeGroup ref="changeAttributes"/>
        <xsd:attribute name="executable" type="nonEmptyString" use="required"/>
        <xsd:attribute name="os" type="xsd:string"/>
        <xsd:attribute name="timeout" type="xsd:string"/>
    </xsd:complexType>

    <xsd:attributeGroup name="sqlAttributes">
        <xsd:attribute name="stripComments" type="booleanExp">
              <xsd:annotation>
                  <xsd:documentation>When true, any comments are removed in the statement before executing on the database. Default: true.</xsd:documentation>
              </xsd:annotation>
        </xsd:attribute>

        <xsd:attribute name="splitStatements" type="booleanExp">
            <xsd:annotation>
                <xsd:documentation>When true, Liquibase splits statements on @endDelimiter and executes them separately. Default: true.</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>

        <xsd:attribute name="endDelimiter" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>The delimiter to separate raw SQL statements. The default value is `;`
                   See: https://docs.liquibase.com/change-types/enddelimiter-sql.html</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attributeGroup ref="dbms"/>

        <xsd:attribute name="resultIn" type="nonEmptyString">
            <xsd:annotation>
                <xsd:documentation>The name of the property populated from the result of the SQL statements.</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:attributeGroup>

    <xsd:attributeGroup name="dbms">
        <xsd:attribute name="dbms" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>Comma separated list of dbms' the change will be run for.
                    Will run for all dbms' if empty or absent</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:attributeGroup>

    <xsd:attributeGroup name="relativeToChangelogPath">
        <xsd:attribute name="relativeToChangelogFile" type="booleanExp">
            <xsd:annotation>
                <xsd:documentation>Specifies whether the path defined in @path is relative to the
                    changelog file rather than looked up in the search path. Default: false
                    See: https://docs.liquibase.com/concepts/changelogs/how-liquibase-finds-files.html
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:attributeGroup>

    <xsd:attributeGroup name="relativeToChangelogFile">
        <xsd:attribute name="relativeToChangelogFile" type="booleanExp">
            <xsd:annotation>
                <xsd:documentation>Specifies whether the file name defined in @file is relative to the
                    changelog file rather than looked up in the search path. Default: false
                    See: https://docs.liquibase.com/concepts/changelogs/how-liquibase-finds-files.html
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:attributeGroup>

    <xsd:complexType name="sqlFile">
        <xsd:annotation>
            <xsd:documentation>Execute any SQL statement(s) in the external file defined in @path.
                The SQL can also contain comments of either of the following formats:
                A multi-line comment that starts with /* and ends with */.
                A single line comment starting with -- and finishing at the end of the line.
                or a comment element can be used
            </xsd:documentation>
        </xsd:annotation>
        <xsd:attributeGroup ref="changeAttributes"/>
        <xsd:attributeGroup ref="sqlAttributes"/>
        <xsd:attribute name="path" type="nonEmptyString" use="required">
            <xsd:annotation>
                <xsd:documentation>Name of the file containing the SQL statements to execute</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="encoding" type="xsd:string" default="UTF-8"/>
        <xsd:attributeGroup ref="relativeToChangelogPath"/>
        <xsd:anyAttribute namespace="##other" processContents="lax"/>
    </xsd:complexType>

    <xsd:complexType name="tagDatabase">
        <xsd:annotation>
            <xsd:documentation>Apply tag defined in @tag to the database for future update or rollback</xsd:documentation>
        </xsd:annotation>
        <xsd:attributeGroup ref="changeAttributes"/>
        <xsd:attribute name="tag" type="nonEmptyString" use="required"/>
        <xsd:anyAttribute namespace="##other"  processContents="lax"/>
    </xsd:complexType>

    <xsd:complexType name="stop" mixed="true">
        <xsd:attributeGroup ref="changeAttributes"/>
    </xsd:complexType>

    <xsd:complexType name="empty">
        <xsd:attributeGroup ref="changeAttributes"/>
    </xsd:complexType>

    <xsd:complexType name="output" mixed="true">
        <xsd:attribute name="target" type="xsd:string"/>
    </xsd:complexType>

    <xsd:complexType name="renameTable">
        <xsd:attributeGroup ref="changeAttributes"/>
        <xsd:attributeGroup ref="catalogNschemaName"/>
        <xsd:attribute name="oldTableName" type="nonEmptyString"
                       use="required"/>
        <xsd:attribute name="newTableName" type="nonEmptyString"
                       use="required"/>
    </xsd:complexType>

    <xsd:complexType name="renameView">
        <xsd:attributeGroup ref="changeAttributes"/>
        <xsd:attributeGroup ref="catalogNschemaName"/>
        <xsd:attribute name="oldViewName" type="nonEmptyString" use="required"/>
        <xsd:attribute name="newViewName" type="nonEmptyString" use="required"/>
    </xsd:complexType>

    <xsd:complexType name="dropTable">
        <xsd:attributeGroup ref="changeAttributes"/>
        <xsd:attributeGroup ref="tableNameAttributes"/>
        <xsd:attribute name="cascadeConstraints" type="booleanExp"/>
    </xsd:complexType>

    <xsd:complexType name="dropView">
        <xsd:attributeGroup ref="changeAttributes"/>
        <xsd:attributeGroup ref="catalogNschemaName"/>
        <xsd:attribute name="viewName" type="nonEmptyString" use="required"/>
    </xsd:complexType>

    <xsd:complexType name="dropProcedure">
        <xsd:attributeGroup ref="changeAttributes"/>
        <xsd:attributeGroup ref="catalogNschemaName"/>
        <xsd:attribute name="procedureName" type="nonEmptyString" use="required"/>
    </xsd:complexType>

    <xsd:complexType name="renameColumn">
        <xsd:attributeGroup ref="changeAttributes"/>
        <xsd:attributeGroup ref="tableNameAttributes"/>
        <xsd:attribute name="oldColumnName" type="xsd:string"
                       use="required"/>
        <xsd:attribute name="newColumnName" type="xsd:string"
                       use="required"/>
        <xsd:attribute name="columnDataType" type="xsd:string"/>
        <xsd:attribute name="remarks" type="xsd:string"/>
    </xsd:complexType>

    <xsd:complexType name="dropColumn">
        <xsd:sequence>
            <xsd:element name="column" minOccurs="0" maxOccurs="unbounded" type="columnType"/>
        </xsd:sequence>
        <xsd:attributeGroup ref="changeAttributes"/>
        <xsd:attributeGroup ref="tableNameAttributes"/>
        <xsd:attribute name="columnName" type="nonEmptyString"/>
    </xsd:complexType>

    <xsd:complexType name="mergeColumns">
        <xsd:attributeGroup ref="changeAttributes"/>
        <xsd:attributeGroup ref="tableNameAttributes"/>
        <xsd:attribute name="column1Name" type="nonEmptyString"
                       use="required"/>
        <xsd:attribute name="joinString" type="xsd:string" use="required"/>
        <xsd:attribute name="column2Name" type="nonEmptyString"
                       use="required"/>
        <xsd:attribute name="finalColumnName" type="nonEmptyString"
                       use="required"/>
        <xsd:attribute name="finalColumnType" type="nonEmptyString"
                       use="required"/>
    </xsd:complexType>

    <xsd:complexType name="createSequence">
        <xsd:attributeGroup ref="sequenceAttributes"/>
    </xsd:complexType>

    <xsd:complexType name="alterSequence">
        <xsd:attributeGroup ref="sequenceAttributes"/>
    </xsd:complexType>

    <xsd:complexType name="dropSequence">
        <xsd:attributeGroup ref="sequenceAttributes"/>
    </xsd:complexType>

    <xsd:complexType name="renameSequence">
        <xsd:attributeGroup ref="changeAttributes"/>
        <xsd:attributeGroup ref="catalogNschemaName"/>
        <xsd:attribute name="oldSequenceName" type="nonEmptyString"
                       use="required"/>
        <xsd:attribute name="newSequenceName" type="nonEmptyString"
                       use="required"/>
    </xsd:complexType>

    <xsd:complexType name="createIndex">
        <xsd:choice maxOccurs="unbounded">
            <xsd:element name="column" type="columnType" maxOccurs="unbounded"/>
            <xsd:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:choice>
        <xsd:attributeGroup ref="changeAttributes"/>
        <xsd:attributeGroup ref="tableNameAttributes"/>
        <xsd:attribute name="indexName" type="nonEmptyString" use="required"/>
        <xsd:attribute name="associatedWith" type="xsd:string"/>
        <xsd:attribute name="unique" type="booleanExp"/>
        <xsd:attribute name="clustered" type="booleanExp"/>
        <xsd:attribute name="tablespace" type="xsd:string"/>
        <xsd:anyAttribute namespace="##other" processContents="lax"/>
    </xsd:complexType>

    <xsd:complexType name="dropIndex">
        <xsd:attributeGroup ref="changeAttributes"/>
        <xsd:attributeGroup ref="tableNameAttributes"/>
        <xsd:attribute name="indexName" type="nonEmptyString" use="required"/>
        <xsd:attribute name="associatedWith" type="xsd:string" use="optional"/>
    </xsd:complexType>

    <xsd:complexType name="customChange">
        <xsd:sequence>
            <xsd:element name="param" minOccurs="0" maxOccurs="unbounded">
                <xsd:complexType mixed="true">
                    <xsd:attribute name="name" type="nonEmptyString" use="required"/>
                    <xsd:attribute name="value" type="xsd:string"/>
                </xsd:complexType>
            </xsd:element>
        </xsd:sequence>
        <xsd:attributeGroup ref="changeAttributes"/>
        <xsd:attribute name="class" type="nonEmptyString" use="required"/>
        <xsd:anyAttribute processContents="lax" />
    </xsd:complexType>

    <!-- Children for changeSet -->
    <xsd:group name="changeSetChildren">
        <xsd:choice>
            <xsd:element ref="comment" maxOccurs="1"/>
            <xsd:element name="createTable" type="createTable" maxOccurs="unbounded"/>
            <xsd:element name="dropTable" type="dropTable" maxOccurs="unbounded"/>
            <xsd:element name="createView" type="createView" maxOccurs="unbounded"/>
            <xsd:element name="renameView" type="renameView" maxOccurs="unbounded"/>
            <xsd:element name="dropView" type="dropView" maxOccurs="unbounded"/>
            <xsd:element name="insert" type="insert" maxOccurs="unbounded"/>
            <xsd:element name="addColumn" type="addColumn" maxOccurs="unbounded"/>
            <xsd:element name="sql" type="sql" maxOccurs="unbounded"/>
            <xsd:element name="createProcedure" type="createProcedure" maxOccurs="unbounded"/>
            <xsd:element name="dropProcedure" type="dropProcedure" maxOccurs="unbounded"/>
            <xsd:element name="sqlFile" type="sqlFile" maxOccurs="unbounded"/>
            <xsd:element name="renameTable" type="renameTable" maxOccurs="unbounded"/>
            <xsd:element name="renameColumn" type="renameColumn" maxOccurs="unbounded"/>
            <xsd:element name="dropColumn" type="dropColumn" maxOccurs="unbounded"/>
            <xsd:element name="mergeColumns" type="mergeColumns" maxOccurs="unbounded"/>
            <xsd:element name="modifyDataType" type="modifyDataType" maxOccurs="unbounded"/>
            <xsd:element name="createSequence" type="alterSequence" maxOccurs="unbounded"/>
            <xsd:element name="alterSequence" type="alterSequence" maxOccurs="unbounded"/>
            <xsd:element name="dropSequence" type="dropSequence" maxOccurs="unbounded"/>
            <xsd:element name="renameSequence" type="renameSequence" maxOccurs="unbounded"/>
            <xsd:element name="createIndex" type="createIndex" maxOccurs="unbounded"/>
            <xsd:element name="dropIndex" type="dropIndex" maxOccurs="unbounded"/>
            <xsd:element name="addNotNullConstraint" type="addNotNullConstraint" maxOccurs="unbounded"/>
            <xsd:element name="dropNotNullConstraint" type="dropNotNullConstraint" maxOccurs="unbounded"/>
            <xsd:element name="addForeignKeyConstraint" type="addForeignKeyConstraint" maxOccurs="unbounded"/>
            <xsd:element name="dropForeignKeyConstraint" type="dropForeignKeyConstraint" maxOccurs="unbounded"/>
            <xsd:element name="dropAllForeignKeyConstraints" type="dropAllForeignKeyConstraints" maxOccurs="unbounded"/>
            <xsd:element name="addPrimaryKey" type="addPrimaryKey" maxOccurs="unbounded"/>
            <xsd:element name="dropPrimaryKey" type="dropPrimaryKey" maxOccurs="unbounded"/>
            <xsd:element name="addLookupTable" type="addLookupTable" maxOccurs="unbounded"/>
            <xsd:element name="addAutoIncrement" type="addAutoIncrement" maxOccurs="unbounded"/>
            <xsd:element name="addDefaultValue" type="addDefaultValue" maxOccurs="unbounded"/>
            <xsd:element name="dropDefaultValue" type="dropDefaultValue" maxOccurs="unbounded"/>
            <xsd:element name="addUniqueConstraint" type="addUniqueConstraint" maxOccurs="unbounded"/>
            <xsd:element name="dropUniqueConstraint" type="dropUniqueConstraint" maxOccurs="unbounded"/>
            <xsd:element name="setTableRemarks" type="setTableRemarks" maxOccurs="unbounded"/>
            <xsd:element name="setColumnRemarks" type="setColumnRemarks" maxOccurs="unbounded"/>
            <xsd:element name="customChange" type="customChange" maxOccurs="unbounded"/>
            <xsd:element name="update" type="update" maxOccurs="unbounded"/>
            <xsd:element name="delete" type="delete" maxOccurs="unbounded"/>
            <xsd:element name="loadData" type="loadData" maxOccurs="unbounded"/>
            <xsd:element name="loadUpdateData" type="loadUpdateData" maxOccurs="unbounded"/>
            <xsd:element name="executeCommand" type="executeCommand" maxOccurs="unbounded"/>
            <xsd:element name="stop" type="stop" maxOccurs="unbounded"/>
            <xsd:element name="output" type="output" maxOccurs="unbounded"/>
            <xsd:element name="empty" type="empty" maxOccurs="unbounded"/>
            <xsd:element name="rollback" type="rollback" maxOccurs="1"/>
            <xsd:any namespace="##other" processContents="lax" minOccurs="0"
                     maxOccurs="unbounded"/>
        </xsd:choice>
    </xsd:group>

    <!-- Children for Precondition -->
    <xsd:group name="PreConditionChildren">
        <xsd:choice>
            <xsd:element name="and" type="conditionalLogic">
                <xsd:annotation>
                    <xsd:documentation>Conditional AND logic</xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="or" type="conditionalLogic">
                <xsd:annotation>
                    <xsd:documentation>Conditional OR logic</xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="not" type="not"/>
            <xsd:element name="dbms" type="dbms"/>
            <xsd:element name="runningAs" type="runningAs"/>
            <xsd:element name="changeSetExecuted" type="changeSetExecuted"/>
            <xsd:element name="tableExists" type="tableExists" />
            <xsd:element name="columnExists" type="columnExists"/>
            <xsd:element name="sequenceExists" type="sequenceExists"/>
            <xsd:element name="foreignKeyConstraintExists" type="foreignKeyConstraintExists"/>
            <xsd:element name="indexExists" type="indexExists"/>
            <xsd:element name="primaryKeyExists" type="primaryKeyExists"/>
            <xsd:element name="viewExists" type="viewExists"/>
            <xsd:element name="tableIsEmpty" type="tableIsEmpty"/>
            <xsd:element name="rowCount" type="rowCount"/>
            <xsd:element name="sqlCheck" type="sqlCheck"/>
            <xsd:element name="changeLogPropertyDefined" type="changeLogPropertyDefined"/>
            <xsd:element name="expectedQuotingStrategy" type="expectedQuotingStrategy"/>
            <xsd:element name="customPrecondition" type="customPrecondition"/>
            <xsd:any namespace="##other" processContents="lax" minOccurs="0"
                     maxOccurs="unbounded"/>
        </xsd:choice>
    </xsd:group>
</xsd:schema>
